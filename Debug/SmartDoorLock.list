
SmartDoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080065a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000078  08006618  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08006618  000082e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e426  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002399  00000000  00000000  000164ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00018868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a44  00000000  00000000  000195a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234f1  00000000  00000000  00019fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119aa  00000000  00000000  0003d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef5f  00000000  00000000  0004ee7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ddde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  0011de24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00121ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e14 	.word	0x08005e14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005e14 	.word	0x08005e14

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <lcd_init>:
static void lcd_send_cmd(char cmd);
static void lcd_send_data(char data);
static void lcd_send(uint8_t data, uint8_t mode);
static void lcd_write_nibble(uint8_t nibble, uint8_t mode);

void lcd_init(I2C_HandleTypeDef *hi2c) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);
 8000604:	2032      	movs	r0, #50	@ 0x32
 8000606:	f001 faa3 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x30);
 800060a:	2030      	movs	r0, #48	@ 0x30
 800060c:	f000 f864 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(5);
 8000610:	2005      	movs	r0, #5
 8000612:	f001 fa9d 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000616:	2030      	movs	r0, #48	@ 0x30
 8000618:	f000 f85e 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f001 fa97 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x30);
 8000622:	2030      	movs	r0, #48	@ 0x30
 8000624:	f000 f858 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f001 fa91 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x20); // 4-bit mode
 800062e:	2020      	movs	r0, #32
 8000630:	f000 f852 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f001 fa8b 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x28); // 2-line, 5x8 dots
 800063a:	2028      	movs	r0, #40	@ 0x28
 800063c:	f000 f84c 	bl	80006d8 <lcd_send_cmd>
    lcd_send_cmd(0x08); // Display off
 8000640:	2008      	movs	r0, #8
 8000642:	f000 f849 	bl	80006d8 <lcd_send_cmd>
    lcd_send_cmd(0x01); // Clear display
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f846 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(2);
 800064c:	2002      	movs	r0, #2
 800064e:	f001 fa7f 	bl	8001b50 <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode
 8000652:	2006      	movs	r0, #6
 8000654:	f000 f840 	bl	80006d8 <lcd_send_cmd>
    lcd_send_cmd(0x0C); // Display ON, Cursor OFF
 8000658:	200c      	movs	r0, #12
 800065a:	f000 f83d 	bl	80006d8 <lcd_send_cmd>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 800066e:	e006      	b.n	800067e <lcd_send_string+0x18>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f83b 	bl	80006f4 <lcd_send_data>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <lcd_send_string+0xa>
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <lcd_put_cur>:

void lcd_put_cur(uint8_t row, uint8_t col) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
    uint8_t pos[] = {0x80, 0xC0};
 80006a0:	f24c 0380 	movw	r3, #49280	@ 0xc080
 80006a4:	81bb      	strh	r3, [r7, #12]
    lcd_send_cmd(pos[row] + col);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	3310      	adds	r3, #16
 80006aa:	443b      	add	r3, r7
 80006ac:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	4413      	add	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f80e 	bl	80006d8 <lcd_send_cmd>
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <lcd_clear>:

void lcd_clear(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 f805 	bl	80006d8 <lcd_send_cmd>
    HAL_Delay(2);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f001 fa3e 	bl	8001b50 <HAL_Delay>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <lcd_send_cmd>:

static void lcd_send_cmd(char cmd) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
    lcd_send(cmd, 0);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f812 	bl	8000710 <lcd_send>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lcd_send_data>:

static void lcd_send_data(char data) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    lcd_send(data, 1);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f804 	bl	8000710 <lcd_send>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <lcd_send>:

static void lcd_send(uint8_t data, uint8_t mode) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble((data >> 4), mode);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	091b      	lsrs	r3, r3, #4
 8000724:	b2db      	uxtb	r3, r3
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f80e 	bl	800074c <lcd_write_nibble>
    lcd_write_nibble((data & 0x0F), mode);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	b2db      	uxtb	r3, r3
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f805 	bl	800074c <lcd_write_nibble>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <lcd_write_nibble>:

static void lcd_write_nibble(uint8_t nibble, uint8_t mode) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af02      	add	r7, sp, #8
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble << 4);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	73fb      	strb	r3, [r7, #15]
    data |= (mode << 0); // RS bit
 8000762:	7bfa      	ldrb	r2, [r7, #15]
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	4313      	orrs	r3, r2
 8000768:	73fb      	strb	r3, [r7, #15]
    data |= 0x08; // Backlight ON
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	73fb      	strb	r3, [r7, #15]

    uint8_t data_u = data | 0x04; // EN = 1
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	73bb      	strb	r3, [r7, #14]
    uint8_t data_l = data & ~0x04; // EN = 0
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f023 0304 	bic.w	r3, r3, #4
 8000780:	737b      	strb	r3, [r7, #13]
    uint8_t buf[2] = {data_u, data_l};
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	723b      	strb	r3, [r7, #8]
 8000786:	7b7b      	ldrb	r3, [r7, #13]
 8000788:	727b      	strb	r3, [r7, #9]

    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, buf, 2, 10);
 800078a:	f107 0208 	add.w	r2, r7, #8
 800078e:	230a      	movs	r3, #10
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2302      	movs	r3, #2
 8000794:	214e      	movs	r1, #78	@ 0x4e
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <lcd_write_nibble+0x58>)
 8000798:	f001 fe58 	bl	800244c <HAL_I2C_Master_Transmit>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000094 	.word	0x20000094

080007a8 <keypad_getkey>:
    // GPIO setup handled by CubeMX
    // Rows: Output, initially HIGH
    // Cols: Input with Pull-up
}

char keypad_getkey(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e062      	b.n	800087a <keypad_getkey+0xd2>
        // Set all rows HIGH first
        for (int r = 0; r < 4; r++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	e00f      	b.n	80007da <keypad_getkey+0x32>
            HAL_GPIO_WritePin(row_pins[r].port, row_pins[r].pin, GPIO_PIN_SET);
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <keypad_getkey+0xe4>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007c2:	4a32      	ldr	r2, [pc, #200]	@ (800088c <keypad_getkey+0xe4>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	4413      	add	r3, r2
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 fca0 	bl	8002114 <HAL_GPIO_WritePin>
        for (int r = 0; r < 4; r++) {
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	ddec      	ble.n	80007ba <keypad_getkey+0x12>
        }

        // Set current row LOW
        HAL_GPIO_WritePin(row_pins[row].port, row_pins[row].pin, GPIO_PIN_RESET);
 80007e0:	4a2a      	ldr	r2, [pc, #168]	@ (800088c <keypad_getkey+0xe4>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007e8:	4a28      	ldr	r2, [pc, #160]	@ (800088c <keypad_getkey+0xe4>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4413      	add	r3, r2
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	f001 fc8d 	bl	8002114 <HAL_GPIO_WritePin>

        // Small delay for signal to settle
        HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f001 f9a8 	bl	8001b50 <HAL_Delay>

        // Check all columns
        for (int col = 0; col < 4; col++) {
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e033      	b.n	800086e <keypad_getkey+0xc6>
            GPIO_PinState state = HAL_GPIO_ReadPin(col_pins[col].port, col_pins[col].pin);
 8000806:	4a22      	ldr	r2, [pc, #136]	@ (8000890 <keypad_getkey+0xe8>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800080e:	4920      	ldr	r1, [pc, #128]	@ (8000890 <keypad_getkey+0xe8>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	440b      	add	r3, r1
 8000816:	889b      	ldrh	r3, [r3, #4]
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f001 fc62 	bl	80020e4 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	70fb      	strb	r3, [r7, #3]
            if (state == GPIO_PIN_RESET) {  // Button pressed (pulled low)
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11e      	bne.n	8000868 <keypad_getkey+0xc0>
                HAL_Delay(50); // Debounce delay
 800082a:	2032      	movs	r0, #50	@ 0x32
 800082c:	f001 f990 	bl	8001b50 <HAL_Delay>
                // Wait for button release
                while (HAL_GPIO_ReadPin(col_pins[col].port, col_pins[col].pin) == GPIO_PIN_RESET) {
 8000830:	e002      	b.n	8000838 <keypad_getkey+0x90>
                    HAL_Delay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f001 f98c 	bl	8001b50 <HAL_Delay>
                while (HAL_GPIO_ReadPin(col_pins[col].port, col_pins[col].pin) == GPIO_PIN_RESET) {
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <keypad_getkey+0xe8>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000840:	4913      	ldr	r1, [pc, #76]	@ (8000890 <keypad_getkey+0xe8>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	889b      	ldrh	r3, [r3, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	4610      	mov	r0, r2
 800084e:	f001 fc49 	bl	80020e4 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0ec      	beq.n	8000832 <keypad_getkey+0x8a>
                }
                return keymap[row][col];
 8000858:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <keypad_getkey+0xec>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	441a      	add	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	e00c      	b.n	8000882 <keypad_getkey+0xda>
        for (int col = 0; col < 4; col++) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b03      	cmp	r3, #3
 8000872:	ddc8      	ble.n	8000806 <keypad_getkey+0x5e>
    for (int row = 0; row < 4; row++) {
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b03      	cmp	r3, #3
 800087e:	dd99      	ble.n	80007b4 <keypad_getkey+0xc>
            }
        }
    }
    return 0; // No key pressed
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08006504 	.word	0x08006504
 8000890:	08006524 	.word	0x08006524
 8000894:	080064f4 	.word	0x080064f4

08000898 <_write>:
void smartlock_fail();
void reset_auth();
void lockout_mode();

// Printf redirection to UART
int _write(int file, char *ptr, int len) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <_write+0x28>)
 80008b0:	f003 fd30 	bl	8004314 <HAL_UART_Transmit>
    return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000140 	.word	0x20000140

080008c4 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80008ca:	f001 f8cf 	bl	8001a6c <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80008ce:	f000 faf5 	bl	8000ebc <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80008d2:	f000 fbef 	bl	80010b4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80008d6:	f000 fbc3 	bl	8001060 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 80008da:	f000 fb5d 	bl	8000f98 <MX_I2C1_Init>
    MX_SPI2_Init();
 80008de:	f000 fb89 	bl	8000ff4 <MX_SPI2_Init>

    /* USER CODE BEGIN 2 */
    printf("\r\n=== Smart Door Lock System Started ===\r\n");
 80008e2:	48ae      	ldr	r0, [pc, #696]	@ (8000b9c <main+0x2d8>)
 80008e4:	f004 fa04 	bl	8004cf0 <puts>
    printf("System: Initializing peripherals...\r\n");
 80008e8:	48ad      	ldr	r0, [pc, #692]	@ (8000ba0 <main+0x2dc>)
 80008ea:	f004 fa01 	bl	8004cf0 <puts>

    // Initialize LCD
    printf("System: Initializing LCD...\r\n");
 80008ee:	48ad      	ldr	r0, [pc, #692]	@ (8000ba4 <main+0x2e0>)
 80008f0:	f004 f9fe 	bl	8004cf0 <puts>
    lcd_init(&hi2c1);
 80008f4:	48ac      	ldr	r0, [pc, #688]	@ (8000ba8 <main+0x2e4>)
 80008f6:	f7ff fe81 	bl	80005fc <lcd_init>
    lcd_clear();
 80008fa:	f7ff fee3 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0, 0);
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fec5 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Smart Door Lock");
 8000906:	48a9      	ldr	r0, [pc, #676]	@ (8000bac <main+0x2e8>)
 8000908:	f7ff fead 	bl	8000666 <lcd_send_string>
    lcd_put_cur(1, 0);
 800090c:	2100      	movs	r1, #0
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff febe 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Ready");
 8000914:	48a6      	ldr	r0, [pc, #664]	@ (8000bb0 <main+0x2ec>)
 8000916:	f7ff fea6 	bl	8000666 <lcd_send_string>
    printf("LCD: Display initialized and ready message shown\r\n");
 800091a:	48a6      	ldr	r0, [pc, #664]	@ (8000bb4 <main+0x2f0>)
 800091c:	f004 f9e8 	bl	8004cf0 <puts>

    // Initialize RFID
    printf("System: Initializing RFID RC522...\r\n");
 8000920:	48a5      	ldr	r0, [pc, #660]	@ (8000bb8 <main+0x2f4>)
 8000922:	f004 f9e5 	bl	8004cf0 <puts>
    MFRC522_Init();
 8000926:	f000 fdfd 	bl	8001524 <MFRC522_Init>
    printf("RFID: RC522 initialized successfully\r\n");
 800092a:	48a4      	ldr	r0, [pc, #656]	@ (8000bbc <main+0x2f8>)
 800092c:	f004 f9e0 	bl	8004cf0 <puts>

    // Reset authentication state
    reset_auth();
 8000930:	f000 fa2c 	bl	8000d8c <reset_auth>
    printf("Auth: Authentication state reset\r\n");
 8000934:	48a2      	ldr	r0, [pc, #648]	@ (8000bc0 <main+0x2fc>)
 8000936:	f004 f9db 	bl	8004cf0 <puts>

    printf("System: Valid PIN = %s\r\n", valid_pin);
 800093a:	49a2      	ldr	r1, [pc, #648]	@ (8000bc4 <main+0x300>)
 800093c:	48a2      	ldr	r0, [pc, #648]	@ (8000bc8 <main+0x304>)
 800093e:	f004 f967 	bl	8004c10 <iprintf>
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
           valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000942:	4ba2      	ldr	r3, [pc, #648]	@ (8000bcc <main+0x308>)
 8000944:	781b      	ldrb	r3, [r3, #0]
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000946:	4619      	mov	r1, r3
           valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000948:	4ba0      	ldr	r3, [pc, #640]	@ (8000bcc <main+0x308>)
 800094a:	785b      	ldrb	r3, [r3, #1]
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 800094c:	4618      	mov	r0, r3
           valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 800094e:	4b9f      	ldr	r3, [pc, #636]	@ (8000bcc <main+0x308>)
 8000950:	789b      	ldrb	r3, [r3, #2]
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000952:	461c      	mov	r4, r3
           valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000954:	4b9d      	ldr	r3, [pc, #628]	@ (8000bcc <main+0x308>)
 8000956:	78db      	ldrb	r3, [r3, #3]
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000958:	461a      	mov	r2, r3
           valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 800095a:	4b9c      	ldr	r3, [pc, #624]	@ (8000bcc <main+0x308>)
 800095c:	791b      	ldrb	r3, [r3, #4]
    printf("System: Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	9200      	str	r2, [sp, #0]
 8000962:	4623      	mov	r3, r4
 8000964:	4602      	mov	r2, r0
 8000966:	489a      	ldr	r0, [pc, #616]	@ (8000bd0 <main+0x30c>)
 8000968:	f004 f952 	bl	8004c10 <iprintf>
    printf("System: Max attempts = %d, Lockout time = %ld ms\r\n", MAX_ATTEMPTS, LOCKOUT_PERIOD_MS);
 800096c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000970:	2103      	movs	r1, #3
 8000972:	4898      	ldr	r0, [pc, #608]	@ (8000bd4 <main+0x310>)
 8000974:	f004 f94c 	bl	8004c10 <iprintf>
    printf("System: Ready for operation!\r\n\r\n");
 8000978:	4897      	ldr	r0, [pc, #604]	@ (8000bd8 <main+0x314>)
 800097a:	f004 f9b9 	bl	8004cf0 <puts>
    while (1)
    {
        /* USER CODE END WHILE */

        // Handle lockout state
        if (fail_count >= MAX_ATTEMPTS) {
 800097e:	4b97      	ldr	r3, [pc, #604]	@ (8000bdc <main+0x318>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d908      	bls.n	8000998 <main+0xd4>
            printf("Security: LOCKOUT MODE - %d failed attempts\r\n", fail_count);
 8000986:	4b95      	ldr	r3, [pc, #596]	@ (8000bdc <main+0x318>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4894      	ldr	r0, [pc, #592]	@ (8000be0 <main+0x31c>)
 800098e:	f004 f93f 	bl	8004c10 <iprintf>
            lockout_mode();
 8000992:	f000 fa21 	bl	8000dd8 <lockout_mode>
            continue;
 8000996:	e0ff      	b.n	8000b98 <main+0x2d4>
        }

        // 1. Keypad check
        char key = keypad_getkey();
 8000998:	f7ff ff06 	bl	80007a8 <keypad_getkey>
 800099c:	4603      	mov	r3, r0
 800099e:	727b      	strb	r3, [r7, #9]
        if (key != 0) {
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 809a 	beq.w	8000adc <main+0x218>
            printf("Keypad: Key pressed = '%c'\r\n", key);
 80009a8:	7a7b      	ldrb	r3, [r7, #9]
 80009aa:	4619      	mov	r1, r3
 80009ac:	488d      	ldr	r0, [pc, #564]	@ (8000be4 <main+0x320>)
 80009ae:	f004 f92f 	bl	8004c10 <iprintf>

            // Accept numeric or * as clear; # as enter
            if (key >= '0' && key <= '9' && pin_index < PIN_LENGTH) {
 80009b2:	7a7b      	ldrb	r3, [r7, #9]
 80009b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80009b6:	d948      	bls.n	8000a4a <main+0x186>
 80009b8:	7a7b      	ldrb	r3, [r7, #9]
 80009ba:	2b39      	cmp	r3, #57	@ 0x39
 80009bc:	d845      	bhi.n	8000a4a <main+0x186>
 80009be:	4b8a      	ldr	r3, [pc, #552]	@ (8000be8 <main+0x324>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d841      	bhi.n	8000a4a <main+0x186>
                pin_entered[pin_index++] = key;
 80009c6:	4b88      	ldr	r3, [pc, #544]	@ (8000be8 <main+0x324>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	b2d1      	uxtb	r1, r2
 80009ce:	4a86      	ldr	r2, [pc, #536]	@ (8000be8 <main+0x324>)
 80009d0:	7011      	strb	r1, [r2, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4a85      	ldr	r2, [pc, #532]	@ (8000bec <main+0x328>)
 80009d6:	7a7b      	ldrb	r3, [r7, #9]
 80009d8:	5453      	strb	r3, [r2, r1]
                printf("Keypad: PIN entry [%d/%d]: ", pin_index, PIN_LENGTH);
 80009da:	4b83      	ldr	r3, [pc, #524]	@ (8000be8 <main+0x324>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2204      	movs	r2, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4883      	ldr	r0, [pc, #524]	@ (8000bf0 <main+0x32c>)
 80009e4:	f004 f914 	bl	8004c10 <iprintf>
                for(int i = 0; i < pin_index; i++) printf("*");
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e005      	b.n	80009fa <main+0x136>
 80009ee:	202a      	movs	r0, #42	@ 0x2a
 80009f0:	f004 f920 	bl	8004c34 <putchar>
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b7b      	ldr	r3, [pc, #492]	@ (8000be8 <main+0x324>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	dbf3      	blt.n	80009ee <main+0x12a>
                printf("\r\n");
 8000a06:	487b      	ldr	r0, [pc, #492]	@ (8000bf4 <main+0x330>)
 8000a08:	f004 f972 	bl	8004cf0 <puts>

                lcd_put_cur(1, 0);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fe3e 	bl	8000690 <lcd_put_cur>
                for (uint8_t i = 0; i < pin_index; ++i) lcd_send_string("*");
 8000a14:	2300      	movs	r3, #0
 8000a16:	72fb      	strb	r3, [r7, #11]
 8000a18:	e005      	b.n	8000a26 <main+0x162>
 8000a1a:	4877      	ldr	r0, [pc, #476]	@ (8000bf8 <main+0x334>)
 8000a1c:	f7ff fe23 	bl	8000666 <lcd_send_string>
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	3301      	adds	r3, #1
 8000a24:	72fb      	strb	r3, [r7, #11]
 8000a26:	4b70      	ldr	r3, [pc, #448]	@ (8000be8 <main+0x324>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	7afa      	ldrb	r2, [r7, #11]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d3f4      	bcc.n	8000a1a <main+0x156>
                for (uint8_t i = pin_index; i < PIN_LENGTH; ++i) lcd_send_string(" ");
 8000a30:	4b6d      	ldr	r3, [pc, #436]	@ (8000be8 <main+0x324>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	72bb      	strb	r3, [r7, #10]
 8000a36:	e005      	b.n	8000a44 <main+0x180>
 8000a38:	4870      	ldr	r0, [pc, #448]	@ (8000bfc <main+0x338>)
 8000a3a:	f7ff fe14 	bl	8000666 <lcd_send_string>
 8000a3e:	7abb      	ldrb	r3, [r7, #10]
 8000a40:	3301      	adds	r3, #1
 8000a42:	72bb      	strb	r3, [r7, #10]
 8000a44:	7abb      	ldrb	r3, [r7, #10]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9f6      	bls.n	8000a38 <main+0x174>
            }

            if (key == '*') {
 8000a4a:	7a7b      	ldrb	r3, [r7, #9]
 8000a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a4e:	d111      	bne.n	8000a74 <main+0x1b0>
                printf("Keypad: Clear PIN entry\r\n");
 8000a50:	486b      	ldr	r0, [pc, #428]	@ (8000c00 <main+0x33c>)
 8000a52:	f004 f94d 	bl	8004cf0 <puts>
                pin_index = 0;
 8000a56:	4b64      	ldr	r3, [pc, #400]	@ (8000be8 <main+0x324>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
                memset(pin_entered, 0, sizeof(pin_entered));
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4862      	ldr	r0, [pc, #392]	@ (8000bec <main+0x328>)
 8000a62:	f004 fa6b 	bl	8004f3c <memset>
                lcd_put_cur(1, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fe11 	bl	8000690 <lcd_put_cur>
                lcd_send_string("    "); // Clear display
 8000a6e:	4865      	ldr	r0, [pc, #404]	@ (8000c04 <main+0x340>)
 8000a70:	f7ff fdf9 	bl	8000666 <lcd_send_string>
            }

            if (key == '#') {
 8000a74:	7a7b      	ldrb	r3, [r7, #9]
 8000a76:	2b23      	cmp	r3, #35	@ 0x23
 8000a78:	d130      	bne.n	8000adc <main+0x218>
                pin_entered[pin_index] = 0;
 8000a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8000be8 <main+0x324>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b5a      	ldr	r3, [pc, #360]	@ (8000bec <main+0x328>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	5499      	strb	r1, [r3, r2]
                printf("Keypad: PIN submitted = '%s'\r\n", pin_entered);
 8000a86:	4959      	ldr	r1, [pc, #356]	@ (8000bec <main+0x328>)
 8000a88:	485f      	ldr	r0, [pc, #380]	@ (8000c08 <main+0x344>)
 8000a8a:	f004 f8c1 	bl	8004c10 <iprintf>

                if (strcmp(pin_entered, valid_pin) == 0) {
 8000a8e:	494d      	ldr	r1, [pc, #308]	@ (8000bc4 <main+0x300>)
 8000a90:	4856      	ldr	r0, [pc, #344]	@ (8000bec <main+0x328>)
 8000a92:	f7ff fbbd 	bl	8000210 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d10d      	bne.n	8000ab8 <main+0x1f4>
                    pin_authenticated = 1;
 8000a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c0c <main+0x348>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
                    printf("Auth: PIN CORRECT! Authentication granted\r\n");
 8000aa2:	485b      	ldr	r0, [pc, #364]	@ (8000c10 <main+0x34c>)
 8000aa4:	f004 f924 	bl	8004cf0 <puts>
                    lcd_put_cur(0,0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fdf0 	bl	8000690 <lcd_put_cur>
                    lcd_send_string("PIN OK        ");
 8000ab0:	4858      	ldr	r0, [pc, #352]	@ (8000c14 <main+0x350>)
 8000ab2:	f7ff fdd8 	bl	8000666 <lcd_send_string>
 8000ab6:	e009      	b.n	8000acc <main+0x208>
                } else {
                    pin_authenticated = 0;
 8000ab8:	4b54      	ldr	r3, [pc, #336]	@ (8000c0c <main+0x348>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
                    printf("Auth: PIN INCORRECT! Expected: %s, Got: %s\r\n", valid_pin, pin_entered);
 8000abe:	4a4b      	ldr	r2, [pc, #300]	@ (8000bec <main+0x328>)
 8000ac0:	4940      	ldr	r1, [pc, #256]	@ (8000bc4 <main+0x300>)
 8000ac2:	4855      	ldr	r0, [pc, #340]	@ (8000c18 <main+0x354>)
 8000ac4:	f004 f8a4 	bl	8004c10 <iprintf>
                    smartlock_fail();
 8000ac8:	f000 f908 	bl	8000cdc <smartlock_fail>
                }

                pin_index = 0;
 8000acc:	4b46      	ldr	r3, [pc, #280]	@ (8000be8 <main+0x324>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
                memset(pin_entered, 0, sizeof(pin_entered));
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4845      	ldr	r0, [pc, #276]	@ (8000bec <main+0x328>)
 8000ad8:	f004 fa30 	bl	8004f3c <memset>
            }
        }

        // 2. RFID check
        uint8_t card_uid[5];
        if (MFRC522_Check(card_uid) == MI_OK) {
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fdb1 	bl	8001646 <MFRC522_Check>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d143      	bne.n	8000b72 <main+0x2ae>
            printf("RFID: Card detected! UID = %02X:%02X:%02X:%02X:%02X\r\n",
                   card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8000aea:	793b      	ldrb	r3, [r7, #4]
            printf("RFID: Card detected! UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000aec:	4619      	mov	r1, r3
                   card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8000aee:	797b      	ldrb	r3, [r7, #5]
            printf("RFID: Card detected! UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000af0:	4618      	mov	r0, r3
                   card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8000af2:	79bb      	ldrb	r3, [r7, #6]
            printf("RFID: Card detected! UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000af4:	461c      	mov	r4, r3
                   card_uid[0], card_uid[1], card_uid[2], card_uid[3], card_uid[4]);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	7a3a      	ldrb	r2, [r7, #8]
            printf("RFID: Card detected! UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4623      	mov	r3, r4
 8000b00:	4602      	mov	r2, r0
 8000b02:	4846      	ldr	r0, [pc, #280]	@ (8000c1c <main+0x358>)
 8000b04:	f004 f884 	bl	8004c10 <iprintf>

            if (memcmp(card_uid, valid_uid, 5) == 0) {
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2205      	movs	r2, #5
 8000b0c:	492f      	ldr	r1, [pc, #188]	@ (8000bcc <main+0x308>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fa04 	bl	8004f1c <memcmp>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10d      	bne.n	8000b36 <main+0x272>
                rfid_authenticated = 1;
 8000b1a:	4b41      	ldr	r3, [pc, #260]	@ (8000c20 <main+0x35c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
                printf("Auth: RFID CORRECT! Authentication granted\r\n");
 8000b20:	4840      	ldr	r0, [pc, #256]	@ (8000c24 <main+0x360>)
 8000b22:	f004 f8e5 	bl	8004cf0 <puts>
                lcd_put_cur(0,0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fdb1 	bl	8000690 <lcd_put_cur>
                lcd_send_string("RFID OK       ");
 8000b2e:	483e      	ldr	r0, [pc, #248]	@ (8000c28 <main+0x364>)
 8000b30:	f7ff fd99 	bl	8000666 <lcd_send_string>
 8000b34:	e019      	b.n	8000b6a <main+0x2a6>
            } else {
                rfid_authenticated = 0;
 8000b36:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <main+0x35c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
                       valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000b3c:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <main+0x308>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000b40:	4619      	mov	r1, r3
                       valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <main+0x308>)
 8000b44:	785b      	ldrb	r3, [r3, #1]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000b46:	4618      	mov	r0, r3
                       valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000b48:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <main+0x308>)
 8000b4a:	789b      	ldrb	r3, [r3, #2]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000b4c:	461c      	mov	r4, r3
                       valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <main+0x308>)
 8000b50:	78db      	ldrb	r3, [r3, #3]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000b52:	461a      	mov	r2, r3
                       valid_uid[0], valid_uid[1], valid_uid[2], valid_uid[3], valid_uid[4]);
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <main+0x308>)
 8000b56:	791b      	ldrb	r3, [r3, #4]
                printf("Auth: RFID INCORRECT! Valid UID = %02X:%02X:%02X:%02X:%02X\r\n",
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	9200      	str	r2, [sp, #0]
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	4602      	mov	r2, r0
 8000b60:	4832      	ldr	r0, [pc, #200]	@ (8000c2c <main+0x368>)
 8000b62:	f004 f855 	bl	8004c10 <iprintf>
                smartlock_fail();
 8000b66:	f000 f8b9 	bl	8000cdc <smartlock_fail>
            }

            HAL_Delay(800); // avoid repeated trigger
 8000b6a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000b6e:	f000 ffef 	bl	8001b50 <HAL_Delay>
        }

        // 3. Dual authentication logic
        if (pin_authenticated && rfid_authenticated) {
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <main+0x348>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00b      	beq.n	8000b92 <main+0x2ce>
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <main+0x35c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <main+0x2ce>
            printf("Auth: DUAL AUTHENTICATION SUCCESS! Both PIN and RFID verified\r\n");
 8000b82:	482b      	ldr	r0, [pc, #172]	@ (8000c30 <main+0x36c>)
 8000b84:	f004 f8b4 	bl	8004cf0 <puts>
            smartlock_success();
 8000b88:	f000 f854 	bl	8000c34 <smartlock_success>
            reset_auth();
 8000b8c:	f000 f8fe 	bl	8000d8c <reset_auth>
            continue;
 8000b90:	e002      	b.n	8000b98 <main+0x2d4>
        }

        HAL_Delay(50); // polling rate
 8000b92:	2032      	movs	r0, #50	@ 0x32
 8000b94:	f000 ffdc 	bl	8001b50 <HAL_Delay>
    {
 8000b98:	e6f1      	b.n	800097e <main+0xba>
 8000b9a:	bf00      	nop
 8000b9c:	08005e2c 	.word	0x08005e2c
 8000ba0:	08005e58 	.word	0x08005e58
 8000ba4:	08005e80 	.word	0x08005e80
 8000ba8:	20000094 	.word	0x20000094
 8000bac:	08005ea0 	.word	0x08005ea0
 8000bb0:	08005eb0 	.word	0x08005eb0
 8000bb4:	08005eb8 	.word	0x08005eb8
 8000bb8:	08005eec 	.word	0x08005eec
 8000bbc:	08005f10 	.word	0x08005f10
 8000bc0:	08005f38 	.word	0x08005f38
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	08005f5c 	.word	0x08005f5c
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	08005f78 	.word	0x08005f78
 8000bd4:	08005fa8 	.word	0x08005fa8
 8000bd8:	08005fdc 	.word	0x08005fdc
 8000bdc:	2000018e 	.word	0x2000018e
 8000be0:	08005ffc 	.word	0x08005ffc
 8000be4:	0800602c 	.word	0x0800602c
 8000be8:	2000018d 	.word	0x2000018d
 8000bec:	20000188 	.word	0x20000188
 8000bf0:	0800604c 	.word	0x0800604c
 8000bf4:	08006068 	.word	0x08006068
 8000bf8:	0800606c 	.word	0x0800606c
 8000bfc:	08006070 	.word	0x08006070
 8000c00:	08006074 	.word	0x08006074
 8000c04:	08006090 	.word	0x08006090
 8000c08:	08006098 	.word	0x08006098
 8000c0c:	20000190 	.word	0x20000190
 8000c10:	080060b8 	.word	0x080060b8
 8000c14:	080060e4 	.word	0x080060e4
 8000c18:	080060f4 	.word	0x080060f4
 8000c1c:	08006124 	.word	0x08006124
 8000c20:	2000018f 	.word	0x2000018f
 8000c24:	0800615c 	.word	0x0800615c
 8000c28:	08006188 	.word	0x08006188
 8000c2c:	08006198 	.word	0x08006198
 8000c30:	080061d8 	.word	0x080061d8

08000c34 <smartlock_success>:
    }
    /* USER CODE END 3 */
}

/* --- Success/failure routines --- */
void smartlock_success() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    printf("Door: ACCESS GRANTED! Unlocking door...\r\n");
 8000c38:	481e      	ldr	r0, [pc, #120]	@ (8000cb4 <smartlock_success+0x80>)
 8000c3a:	f004 f859 	bl	8004cf0 <puts>
    lcd_clear();
 8000c3e:	f7ff fd41 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0, 0);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fd23 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Access Granted!");
 8000c4a:	481b      	ldr	r0, [pc, #108]	@ (8000cb8 <smartlock_success+0x84>)
 8000c4c:	f7ff fd0b 	bl	8000666 <lcd_send_string>

    // Turn ON user LED (LD2) to show unlock
    HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	4819      	ldr	r0, [pc, #100]	@ (8000cbc <smartlock_success+0x88>)
 8000c56:	f001 fa5d 	bl	8002114 <HAL_GPIO_WritePin>
    printf("Hardware: Status LED ON\r\n");
 8000c5a:	4819      	ldr	r0, [pc, #100]	@ (8000cc0 <smartlock_success+0x8c>)
 8000c5c:	f004 f848 	bl	8004cf0 <puts>

    // Unlock relay (Active LOW)
    HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	4817      	ldr	r0, [pc, #92]	@ (8000cc4 <smartlock_success+0x90>)
 8000c66:	f001 fa55 	bl	8002114 <HAL_GPIO_WritePin>
    printf("Hardware: Relay UNLOCKED (LOW)\r\n");
 8000c6a:	4817      	ldr	r0, [pc, #92]	@ (8000cc8 <smartlock_success+0x94>)
 8000c6c:	f004 f840 	bl	8004cf0 <puts>

    printf("Door: Door will remain unlocked for 2 seconds...\r\n");
 8000c70:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <smartlock_success+0x98>)
 8000c72:	f004 f83d 	bl	8004cf0 <puts>
    HAL_Delay(2000);
 8000c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c7a:	f000 ff69 	bl	8001b50 <HAL_Delay>

    // Lock relay and turn off status LED
    HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <smartlock_success+0x90>)
 8000c84:	f001 fa46 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <smartlock_success+0x88>)
 8000c8e:	f001 fa41 	bl	8002114 <HAL_GPIO_WritePin>
    printf("Hardware: Relay LOCKED (HIGH), Status LED OFF\r\n");
 8000c92:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <smartlock_success+0x9c>)
 8000c94:	f004 f82c 	bl	8004cf0 <puts>

    lcd_clear();
 8000c98:	f7ff fd14 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0,0);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fcf6 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Ready         ");
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <smartlock_success+0xa0>)
 8000ca6:	f7ff fcde 	bl	8000666 <lcd_send_string>
    printf("Door: Door locked and system ready\r\n\r\n");
 8000caa:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <smartlock_success+0xa4>)
 8000cac:	f004 f820 	bl	8004cf0 <puts>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	08006218 	.word	0x08006218
 8000cb8:	08006244 	.word	0x08006244
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	08006254 	.word	0x08006254
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	08006270 	.word	0x08006270
 8000ccc:	08006290 	.word	0x08006290
 8000cd0:	080062c4 	.word	0x080062c4
 8000cd4:	080062f4 	.word	0x080062f4
 8000cd8:	08006304 	.word	0x08006304

08000cdc <smartlock_fail>:

void smartlock_fail() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
    fail_count++;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <smartlock_fail+0x90>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <smartlock_fail+0x90>)
 8000cec:	701a      	strb	r2, [r3, #0]
    printf("Security: ACCESS DENIED! Fail count = %d/%d\r\n", fail_count, MAX_ATTEMPTS);
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <smartlock_fail+0x90>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <smartlock_fail+0x94>)
 8000cf8:	f003 ff8a 	bl	8004c10 <iprintf>

    lcd_clear();
 8000cfc:	f7ff fce2 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0,0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fcc4 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Access Denied!");
 8000d08:	481a      	ldr	r0, [pc, #104]	@ (8000d74 <smartlock_fail+0x98>)
 8000d0a:	f7ff fcac 	bl	8000666 <lcd_send_string>

    // Blink the onboard LED for access denied
    printf("Hardware: Blinking status LED for denial indication\r\n");
 8000d0e:	481a      	ldr	r0, [pc, #104]	@ (8000d78 <smartlock_fail+0x9c>)
 8000d10:	f003 ffee 	bl	8004cf0 <puts>
    for(int i=0; i<4; i++) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	e009      	b.n	8000d2e <smartlock_fail+0x52>
        HAL_GPIO_TogglePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin);
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <smartlock_fail+0xa0>)
 8000d1e:	f001 fa12 	bl	8002146 <HAL_GPIO_TogglePin>
        HAL_Delay(150);
 8000d22:	2096      	movs	r0, #150	@ 0x96
 8000d24:	f000 ff14 	bl	8001b50 <HAL_Delay>
    for(int i=0; i<4; i++) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	ddf2      	ble.n	8000d1a <smartlock_fail+0x3e>
    }
    HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2120      	movs	r1, #32
 8000d38:	4810      	ldr	r0, [pc, #64]	@ (8000d7c <smartlock_fail+0xa0>)
 8000d3a:	f001 f9eb 	bl	8002114 <HAL_GPIO_WritePin>

    lcd_clear();
 8000d3e:	f7ff fcc1 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fca3 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Ready         ");
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <smartlock_fail+0xa4>)
 8000d4c:	f7ff fc8b 	bl	8000666 <lcd_send_string>

    if (fail_count >= MAX_ATTEMPTS) {
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <smartlock_fail+0x90>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d902      	bls.n	8000d5e <smartlock_fail+0x82>
        printf("Security: MAX ATTEMPTS REACHED! Lockout will begin...\r\n");
 8000d58:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <smartlock_fail+0xa8>)
 8000d5a:	f003 ffc9 	bl	8004cf0 <puts>
    }
    printf("\r\n");
 8000d5e:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <smartlock_fail+0xac>)
 8000d60:	f003 ffc6 	bl	8004cf0 <puts>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000018e 	.word	0x2000018e
 8000d70:	0800632c 	.word	0x0800632c
 8000d74:	0800635c 	.word	0x0800635c
 8000d78:	0800636c 	.word	0x0800636c
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	080062f4 	.word	0x080062f4
 8000d84:	080063a4 	.word	0x080063a4
 8000d88:	08006068 	.word	0x08006068

08000d8c <reset_auth>:

void reset_auth() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    rfid_authenticated = 0;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <reset_auth+0x38>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
    pin_authenticated = 0;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <reset_auth+0x3c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
    pin_index = 0;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <reset_auth+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    memset(pin_entered, 0, sizeof(pin_entered));
 8000da2:	2205      	movs	r2, #5
 8000da4:	2100      	movs	r1, #0
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <reset_auth+0x44>)
 8000da8:	f004 f8c8 	bl	8004f3c <memset>
    printf("Auth: Authentication flags reset (PIN: %d, RFID: %d)\r\n",
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <reset_auth+0x3c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <reset_auth+0x38>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <reset_auth+0x48>)
 8000dba:	f003 ff29 	bl	8004c10 <iprintf>
           pin_authenticated, rfid_authenticated);
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000018f 	.word	0x2000018f
 8000dc8:	20000190 	.word	0x20000190
 8000dcc:	2000018d 	.word	0x2000018d
 8000dd0:	20000188 	.word	0x20000188
 8000dd4:	080063dc 	.word	0x080063dc

08000dd8 <lockout_mode>:

void lockout_mode() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
    printf("Security: *** LOCKOUT MODE ACTIVATED ***\r\n");
 8000dde:	482e      	ldr	r0, [pc, #184]	@ (8000e98 <lockout_mode+0xc0>)
 8000de0:	f003 ff86 	bl	8004cf0 <puts>
    lcd_clear();
 8000de4:	f7ff fc6e 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fc50 	bl	8000690 <lcd_put_cur>
    lcd_send_string("LOCKED OUT!");
 8000df0:	482a      	ldr	r0, [pc, #168]	@ (8000e9c <lockout_mode+0xc4>)
 8000df2:	f7ff fc38 	bl	8000666 <lcd_send_string>

    uint32_t remaining = LOCKOUT_PERIOD_MS / 1000; // in seconds
 8000df6:	231e      	movs	r3, #30
 8000df8:	61bb      	str	r3, [r7, #24]
    printf("Security: Lockout duration = %ld seconds\r\n", remaining);
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	4828      	ldr	r0, [pc, #160]	@ (8000ea0 <lockout_mode+0xc8>)
 8000dfe:	f003 ff07 	bl	8004c10 <iprintf>

    for(uint32_t t = 0; t < remaining; ++t) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e02a      	b.n	8000e5e <lockout_mode+0x86>
        uint32_t time_left = remaining - t;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
        printf("Security: Lockout remaining: %ld seconds\r\n", time_left);
 8000e10:	6979      	ldr	r1, [r7, #20]
 8000e12:	4824      	ldr	r0, [pc, #144]	@ (8000ea4 <lockout_mode+0xcc>)
 8000e14:	f003 fefc 	bl	8004c10 <iprintf>

        lcd_put_cur(1, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fc38 	bl	8000690 <lcd_put_cur>
        char buf[17];
        snprintf(buf, sizeof(buf), "Wait %lus       ", time_left);
 8000e20:	4638      	mov	r0, r7
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	4a20      	ldr	r2, [pc, #128]	@ (8000ea8 <lockout_mode+0xd0>)
 8000e26:	2111      	movs	r1, #17
 8000e28:	f003 ff6a 	bl	8004d00 <sniprintf>
        lcd_send_string(buf);
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fc19 	bl	8000666 <lcd_send_string>

        // Blink LED during lockout
        HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_SET); // ON
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	481c      	ldr	r0, [pc, #112]	@ (8000eac <lockout_mode+0xd4>)
 8000e3a:	f001 f96b 	bl	8002114 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000e3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e42:	f000 fe85 	bl	8001b50 <HAL_Delay>
        HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_RESET); // OFF
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4818      	ldr	r0, [pc, #96]	@ (8000eac <lockout_mode+0xd4>)
 8000e4c:	f001 f962 	bl	8002114 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8000e50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e54:	f000 fe7c 	bl	8001b50 <HAL_Delay>
    for(uint32_t t = 0; t < remaining; ++t) {
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3d0      	bcc.n	8000e08 <lockout_mode+0x30>
    }

    // After lockout period, turn off LED and show Ready
    HAL_GPIO_WritePin(LOCK_STATUS_LED_GPIO_Port, LOCK_STATUS_LED_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4810      	ldr	r0, [pc, #64]	@ (8000eac <lockout_mode+0xd4>)
 8000e6c:	f001 f952 	bl	8002114 <HAL_GPIO_WritePin>
    lcd_clear();
 8000e70:	f7ff fc28 	bl	80006c4 <lcd_clear>
    lcd_put_cur(0, 0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fc0a 	bl	8000690 <lcd_put_cur>
    lcd_send_string("Ready         ");
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <lockout_mode+0xd8>)
 8000e7e:	f7ff fbf2 	bl	8000666 <lcd_send_string>
    fail_count = 0; // Reset the failed-attempts counter here
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <lockout_mode+0xdc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]

    printf("Security: LOCKOUT ENDED - System ready, fail count reset\r\n\r\n");
 8000e88:	480b      	ldr	r0, [pc, #44]	@ (8000eb8 <lockout_mode+0xe0>)
 8000e8a:	f003 ff31 	bl	8004cf0 <puts>
}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08006414 	.word	0x08006414
 8000e9c:	08006440 	.word	0x08006440
 8000ea0:	0800644c 	.word	0x0800644c
 8000ea4:	08006478 	.word	0x08006478
 8000ea8:	080064a4 	.word	0x080064a4
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	080062f4 	.word	0x080062f4
 8000eb4:	2000018e 	.word	0x2000018e
 8000eb8:	080064b8 	.word	0x080064b8

08000ebc <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	@ 0x50
 8000ec0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2234      	movs	r2, #52	@ 0x34
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 f836 	bl	8004f3c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <SystemClock_Config+0xd4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <SystemClock_Config+0xd4>)
 8000eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <SystemClock_Config+0xd4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <SystemClock_Config+0xd8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f08:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <SystemClock_Config+0xd8>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <SystemClock_Config+0xd8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f24:	2310      	movs	r3, #16
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000f30:	2310      	movs	r3, #16
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000f34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f38:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f922 	bl	8003194 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x9e>
    {
        Error_Handler();
 8000f56:	f000 f95b 	bl	8001210 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2102      	movs	r1, #2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fdc2 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xca>
    {
        Error_Handler();
 8000f82:	f000 f945 	bl	8001210 <Error_Handler>
    }
}
 8000f86:	bf00      	nop
 8000f88:	3750      	adds	r7, #80	@ 0x50
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_I2C1_Init>:
* @brief I2C1 Initialization Function
* @param None
* @retval None
*/
static void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000f9e:	4a13      	ldr	r2, [pc, #76]	@ (8000fec <MX_I2C1_Init+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <MX_I2C1_Init+0x58>)
 8000fa6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fba:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <MX_I2C1_Init+0x50>)
 8000fd6:	f001 f8f5 	bl	80021c4 <HAL_I2C_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8000fe0:	f000 f916 	bl	8001210 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	000186a0 	.word	0x000186a0

08000ff4 <MX_SPI2_Init>:
* @brief SPI2 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    /* USER CODE END SPI2_Init 0 */

    /* USER CODE BEGIN SPI2_Init 1 */
    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_SPI2_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <MX_SPI2_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001004:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_SPI2_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_SPI2_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001024:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_SPI2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_SPI2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial = 10;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_SPI2_Init+0x64>)
 8001046:	f002 fb43 	bl	80036d0 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8001050:	f000 f8de 	bl	8001210 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */
    /* USER CODE END SPI2_Init 2 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000e8 	.word	0x200000e8
 800105c:	40003800 	.word	0x40003800

08001060 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f003 f8ec 	bl	8004274 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 80010a2:	f000 f8b5 	bl	8001210 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000140 	.word	0x20000140
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b45      	ldr	r3, [pc, #276]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a44      	ldr	r2, [pc, #272]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <MX_GPIO_Init+0x14c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b3e      	ldr	r3, [pc, #248]	@ (8001200 <MX_GPIO_Init+0x14c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a3d      	ldr	r2, [pc, #244]	@ (8001200 <MX_GPIO_Init+0x14c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <MX_GPIO_Init+0x14c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b37      	ldr	r3, [pc, #220]	@ (8001200 <MX_GPIO_Init+0x14c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a36      	ldr	r2, [pc, #216]	@ (8001200 <MX_GPIO_Init+0x14c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <MX_GPIO_Init+0x14c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2111      	movs	r1, #17
 800113e:	4831      	ldr	r0, [pc, #196]	@ (8001204 <MX_GPIO_Init+0x150>)
 8001140:	f000 ffe8 	bl	8002114 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800114a:	482f      	ldr	r0, [pc, #188]	@ (8001208 <MX_GPIO_Init+0x154>)
 800114c:	f000 ffe2 	bl	8002114 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001156:	482d      	ldr	r0, [pc, #180]	@ (800120c <MX_GPIO_Init+0x158>)
 8001158:	f000 ffdc 	bl	8002114 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001162:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4824      	ldr	r0, [pc, #144]	@ (8001204 <MX_GPIO_Init+0x150>)
 8001174:	f000 fe22 	bl	8001dbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PC0 PC4 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001178:	2311      	movs	r3, #17
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	481d      	ldr	r0, [pc, #116]	@ (8001204 <MX_GPIO_Init+0x150>)
 8001190:	f000 fe14 	bl	8001dbc <HAL_GPIO_Init>

    /*Configure GPIO pins : PA5 PA6 PA7 PA9 */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001194:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <MX_GPIO_Init+0x154>)
 80011ae:	f000 fe05 	bl	8001dbc <HAL_GPIO_Init>

    /*Configure GPIO pin : PB12 */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	@ (800120c <MX_GPIO_Init+0x158>)
 80011cc:	f000 fdf6 	bl	8001dbc <HAL_GPIO_Init>

    /*Configure GPIO pin : PB3 */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d0:	2308      	movs	r3, #8
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <MX_GPIO_Init+0x158>)
 80011e4:	f000 fdea 	bl	8001dbc <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2028      	movs	r0, #40	@ 0x28
 80011ee:	f000 fdae 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f2:	2028      	movs	r0, #40	@ 0x28
 80011f4:	f000 fdc7 	bl	8001d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400

08001210 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <Error_Handler+0x8>

0800121c <RC522_WriteReg>:
#define RC522_CS_HIGH()  HAL_GPIO_WritePin(RC522_NSS_PORT, RC522_NSS_PIN, GPIO_PIN_SET)
#define RC522_RST_LOW()  HAL_GPIO_WritePin(RC522_RST_PORT, RC522_RST_PIN, GPIO_PIN_RESET)
#define RC522_RST_HIGH() HAL_GPIO_WritePin(RC522_RST_PORT, RC522_RST_PIN, GPIO_PIN_SET)

// Low-level read/write register
static void RC522_WriteReg(uint8_t addr, uint8_t val) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = (addr << 1) & 0x7E; // address format for write
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001236:	b2db      	uxtb	r3, r3
 8001238:	733b      	strb	r3, [r7, #12]
    buf[1] = val;
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	737b      	strb	r3, [r7, #13]
    RC522_CS_LOW();
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001244:	480a      	ldr	r0, [pc, #40]	@ (8001270 <RC522_WriteReg+0x54>)
 8001246:	f000 ff65 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2202      	movs	r2, #2
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <RC522_WriteReg+0x58>)
 8001256:	f002 fac4 	bl	80037e2 <HAL_SPI_Transmit>
    RC522_CS_HIGH();
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <RC522_WriteReg+0x54>)
 8001262:	f000 ff57 	bl	8002114 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020400 	.word	0x40020400
 8001274:	200000e8 	.word	0x200000e8

08001278 <RC522_ReadReg>:

static uint8_t RC522_ReadReg(uint8_t addr) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = ((addr << 1) & 0x7E) | 0x80; // read address
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800128e:	b25b      	sxtb	r3, r3
 8001290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001294:	b25b      	sxtb	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	73bb      	strb	r3, [r7, #14]
    RC522_CS_LOW();
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <RC522_ReadReg+0x68>)
 80012a6:	f000 ff35 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx, 1, HAL_MAX_DELAY);
 80012aa:	f107 010f 	add.w	r1, r7, #15
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	2201      	movs	r2, #1
 80012b4:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <RC522_ReadReg+0x6c>)
 80012b6:	f002 fa94 	bl	80037e2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx, 1, HAL_MAX_DELAY);
 80012ba:	f107 010e 	add.w	r1, r7, #14
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	2201      	movs	r2, #1
 80012c4:	4807      	ldr	r0, [pc, #28]	@ (80012e4 <RC522_ReadReg+0x6c>)
 80012c6:	f002 fbd0 	bl	8003a6a <HAL_SPI_Receive>
    RC522_CS_HIGH();
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <RC522_ReadReg+0x68>)
 80012d2:	f000 ff1f 	bl	8002114 <HAL_GPIO_WritePin>
    return rx;
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40020400 	.word	0x40020400
 80012e4:	200000e8 	.word	0x200000e8

080012e8 <RC522_SetBitMask>:

static void RC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
    RC522_WriteReg(reg, RC522_ReadReg(reg) | mask);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffbc 	bl	8001278 <RC522_ReadReg>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	4313      	orrs	r3, r2
 8001308:	b2da      	uxtb	r2, r3
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff84 	bl	800121c <RC522_WriteReg>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <RC522_ClearBitMask>:
static void RC522_ClearBitMask(uint8_t reg, uint8_t mask) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
    RC522_WriteReg(reg, RC522_ReadReg(reg) & (~mask));
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffa2 	bl	8001278 <RC522_ReadReg>
 8001334:	4603      	mov	r3, r0
 8001336:	b25a      	sxtb	r2, r3
 8001338:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800133c:	43db      	mvns	r3, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4013      	ands	r3, r2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	b2da      	uxtb	r2, r3
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff66 	bl	800121c <RC522_WriteReg>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <MFRC522_ToCard>:
    result[0] = RC522_ReadReg(CRCResultRegL);
    result[1] = RC522_ReadReg(CRCResultRegH);
}

// Core transceive function
static uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	4613      	mov	r3, r2
 8001368:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 800136a:	2302      	movs	r3, #2
 800136c:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    if (command == PCD_AUTHENT) {
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b0e      	cmp	r3, #14
 800137a:	d103      	bne.n	8001384 <MFRC522_ToCard+0x2c>
        irqEn = 0x12;
 800137c:	2312      	movs	r3, #18
 800137e:	75bb      	strb	r3, [r7, #22]
        waitIRq = 0x10;
 8001380:	2310      	movs	r3, #16
 8001382:	757b      	strb	r3, [r7, #21]
    }
    if (command == PCD_TRANSCEIVE) {
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d103      	bne.n	8001392 <MFRC522_ToCard+0x3a>
        irqEn = 0x77;
 800138a:	2377      	movs	r3, #119	@ 0x77
 800138c:	75bb      	strb	r3, [r7, #22]
        waitIRq = 0x30;
 800138e:	2330      	movs	r3, #48	@ 0x30
 8001390:	757b      	strb	r3, [r7, #21]
    }

    RC522_WriteReg(CommIEnReg, irqEn | 0x80);  // Allow interrupts
 8001392:	7dbb      	ldrb	r3, [r7, #22]
 8001394:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	2002      	movs	r0, #2
 800139e:	f7ff ff3d 	bl	800121c <RC522_WriteReg>
    RC522_ClearBitMask(CommIrqReg, 0x80);      // Clear IRQ
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	2004      	movs	r0, #4
 80013a6:	f7ff ffb9 	bl	800131c <RC522_ClearBitMask>
    RC522_SetBitMask(FIFOLevelReg, 0x80);      // Flush FIFO
 80013aa:	2180      	movs	r1, #128	@ 0x80
 80013ac:	200a      	movs	r0, #10
 80013ae:	f7ff ff9b 	bl	80012e8 <RC522_SetBitMask>

    // Write data to FIFO
    for (i = 0; i < sendLen; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	827b      	strh	r3, [r7, #18]
 80013b6:	e00a      	b.n	80013ce <MFRC522_ToCard+0x76>
        RC522_WriteReg(FIFODataReg, sendData[i]);
 80013b8:	8a7b      	ldrh	r3, [r7, #18]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	2009      	movs	r0, #9
 80013c4:	f7ff ff2a 	bl	800121c <RC522_WriteReg>
    for (i = 0; i < sendLen; i++) {
 80013c8:	8a7b      	ldrh	r3, [r7, #18]
 80013ca:	3301      	adds	r3, #1
 80013cc:	827b      	strh	r3, [r7, #18]
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	8a7a      	ldrh	r2, [r7, #18]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3ef      	bcc.n	80013b8 <MFRC522_ToCard+0x60>
    }

    RC522_WriteReg(CommandReg, command);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	4619      	mov	r1, r3
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff ff1d 	bl	800121c <RC522_WriteReg>
    if (command == PCD_TRANSCEIVE) {
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d103      	bne.n	80013f0 <MFRC522_ToCard+0x98>
        RC522_SetBitMask(BitFramingReg, 0x80); // StartSend=1, transmission of data starts
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	200d      	movs	r0, #13
 80013ec:	f7ff ff7c 	bl	80012e8 <RC522_SetBitMask>
    }

    // Wait for completion
    i = 2000;
 80013f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013f4:	827b      	strh	r3, [r7, #18]
    do {
        n = RC522_ReadReg(CommIrqReg);
 80013f6:	2004      	movs	r0, #4
 80013f8:	f7ff ff3e 	bl	8001278 <RC522_ReadReg>
 80013fc:	4603      	mov	r3, r0
 80013fe:	753b      	strb	r3, [r7, #20]
        i--;
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	3b01      	subs	r3, #1
 8001404:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001406:	8a7b      	ldrh	r3, [r7, #18]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <MFRC522_ToCard+0xca>
 800140c:	7d3b      	ldrb	r3, [r7, #20]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d105      	bne.n	8001422 <MFRC522_ToCard+0xca>
 8001416:	7d3a      	ldrb	r2, [r7, #20]
 8001418:	7d7b      	ldrb	r3, [r7, #21]
 800141a:	4013      	ands	r3, r2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0e9      	beq.n	80013f6 <MFRC522_ToCard+0x9e>

    RC522_ClearBitMask(BitFramingReg, 0x80);
 8001422:	2180      	movs	r1, #128	@ 0x80
 8001424:	200d      	movs	r0, #13
 8001426:	f7ff ff79 	bl	800131c <RC522_ClearBitMask>

    if (i != 0) {
 800142a:	8a7b      	ldrh	r3, [r7, #18]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d057      	beq.n	80014e0 <MFRC522_ToCard+0x188>
        if (!(RC522_ReadReg(ErrorReg) & 0x1B)) {
 8001430:	2006      	movs	r0, #6
 8001432:	f7ff ff21 	bl	8001278 <RC522_ReadReg>
 8001436:	4603      	mov	r3, r0
 8001438:	f003 031b 	and.w	r3, r3, #27
 800143c:	2b00      	cmp	r3, #0
 800143e:	d14d      	bne.n	80014dc <MFRC522_ToCard+0x184>
            status = MI_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01) {
 8001444:	7d3a      	ldrb	r2, [r7, #20]
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	4013      	ands	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MFRC522_ToCard+0x100>
                status = MI_NOTAGERR;
 8001454:	2301      	movs	r3, #1
 8001456:	75fb      	strb	r3, [r7, #23]
            }
            if (command == PCD_TRANSCEIVE) {
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d140      	bne.n	80014e0 <MFRC522_ToCard+0x188>
                n = RC522_ReadReg(FIFOLevelReg);
 800145e:	200a      	movs	r0, #10
 8001460:	f7ff ff0a 	bl	8001278 <RC522_ReadReg>
 8001464:	4603      	mov	r3, r0
 8001466:	753b      	strb	r3, [r7, #20]
                lastBits = RC522_ReadReg(ControlReg) & 0x07;
 8001468:	200c      	movs	r0, #12
 800146a:	f7ff ff05 	bl	8001278 <RC522_ReadReg>
 800146e:	4603      	mov	r3, r0
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	747b      	strb	r3, [r7, #17]
                if (lastBits) {
 8001476:	7c7b      	ldrb	r3, [r7, #17]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <MFRC522_ToCard+0x13c>
                    *backLen = (n - 1) * 8 + lastBits;
 800147c:	7d3b      	ldrb	r3, [r7, #20]
 800147e:	3b01      	subs	r3, #1
 8001480:	b29b      	uxth	r3, r3
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	b29a      	uxth	r2, r3
 8001486:	7c7b      	ldrb	r3, [r7, #17]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b29a      	uxth	r2, r3
 800148e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001490:	801a      	strh	r2, [r3, #0]
 8001492:	e005      	b.n	80014a0 <MFRC522_ToCard+0x148>
                } else {
                    *backLen = n * 8;
 8001494:	7d3b      	ldrb	r3, [r7, #20]
 8001496:	b29b      	uxth	r3, r3
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	b29a      	uxth	r2, r3
 800149c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149e:	801a      	strh	r2, [r3, #0]
                }
                if (n == 0) n = 1;
 80014a0:	7d3b      	ldrb	r3, [r7, #20]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <MFRC522_ToCard+0x152>
 80014a6:	2301      	movs	r3, #1
 80014a8:	753b      	strb	r3, [r7, #20]
                if (n > 16) n = 16;
 80014aa:	7d3b      	ldrb	r3, [r7, #20]
 80014ac:	2b10      	cmp	r3, #16
 80014ae:	d901      	bls.n	80014b4 <MFRC522_ToCard+0x15c>
 80014b0:	2310      	movs	r3, #16
 80014b2:	753b      	strb	r3, [r7, #20]
                for (i = 0; i < n; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	827b      	strh	r3, [r7, #18]
 80014b8:	e00a      	b.n	80014d0 <MFRC522_ToCard+0x178>
                    backData[i] = RC522_ReadReg(FIFODataReg);
 80014ba:	8a7b      	ldrh	r3, [r7, #18]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	18d4      	adds	r4, r2, r3
 80014c0:	2009      	movs	r0, #9
 80014c2:	f7ff fed9 	bl	8001278 <RC522_ReadReg>
 80014c6:	4603      	mov	r3, r0
 80014c8:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
 80014ca:	8a7b      	ldrh	r3, [r7, #18]
 80014cc:	3301      	adds	r3, #1
 80014ce:	827b      	strh	r3, [r7, #18]
 80014d0:	7d3b      	ldrb	r3, [r7, #20]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	8a7a      	ldrh	r2, [r7, #18]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3ef      	bcc.n	80014ba <MFRC522_ToCard+0x162>
 80014da:	e001      	b.n	80014e0 <MFRC522_ToCard+0x188>
                }
            }
        } else {
            status = MI_ERR;
 80014dc:	2302      	movs	r3, #2
 80014de:	75fb      	strb	r3, [r7, #23]
        }
    }
    return status;
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}

080014ea <MFRC522_Reset>:

// Public functions
void MFRC522_Reset(void) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
    RC522_WriteReg(CommandReg, PCD_RESETPHASE);
 80014ee:	210f      	movs	r1, #15
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff fe93 	bl	800121c <RC522_WriteReg>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}

080014fa <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
    uint8_t temp = RC522_ReadReg(TxControlReg);
 8001500:	2014      	movs	r0, #20
 8001502:	f7ff feb9 	bl	8001278 <RC522_ReadReg>
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03)) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <MFRC522_AntennaOn+0x22>
        RC522_SetBitMask(TxControlReg, 0x03);
 8001514:	2103      	movs	r1, #3
 8001516:	2014      	movs	r0, #20
 8001518:	f7ff fee6 	bl	80012e8 <RC522_SetBitMask>
    }
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MFRC522_Init>:

void MFRC522_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    // Hardware reset: toggle RST pin if available
    RC522_RST_LOW();
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	4815      	ldr	r0, [pc, #84]	@ (8001584 <MFRC522_Init+0x60>)
 800152e:	f000 fdf1 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001532:	2032      	movs	r0, #50	@ 0x32
 8001534:	f000 fb0c 	bl	8001b50 <HAL_Delay>
    RC522_RST_HIGH();
 8001538:	2201      	movs	r2, #1
 800153a:	2102      	movs	r1, #2
 800153c:	4811      	ldr	r0, [pc, #68]	@ (8001584 <MFRC522_Init+0x60>)
 800153e:	f000 fde9 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001542:	2032      	movs	r0, #50	@ 0x32
 8001544:	f000 fb04 	bl	8001b50 <HAL_Delay>

    MFRC522_Reset();
 8001548:	f7ff ffcf 	bl	80014ea <MFRC522_Reset>

    RC522_WriteReg(TModeReg, 0x8D);
 800154c:	218d      	movs	r1, #141	@ 0x8d
 800154e:	202a      	movs	r0, #42	@ 0x2a
 8001550:	f7ff fe64 	bl	800121c <RC522_WriteReg>
    RC522_WriteReg(TPrescalerReg, 0x3E);
 8001554:	213e      	movs	r1, #62	@ 0x3e
 8001556:	202b      	movs	r0, #43	@ 0x2b
 8001558:	f7ff fe60 	bl	800121c <RC522_WriteReg>
    RC522_WriteReg(TReloadRegL, 30);
 800155c:	211e      	movs	r1, #30
 800155e:	202d      	movs	r0, #45	@ 0x2d
 8001560:	f7ff fe5c 	bl	800121c <RC522_WriteReg>
    RC522_WriteReg(TReloadRegH, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	202c      	movs	r0, #44	@ 0x2c
 8001568:	f7ff fe58 	bl	800121c <RC522_WriteReg>
    RC522_WriteReg(TxASKReg, 0x40);
 800156c:	2140      	movs	r1, #64	@ 0x40
 800156e:	2015      	movs	r0, #21
 8001570:	f7ff fe54 	bl	800121c <RC522_WriteReg>
    RC522_WriteReg(ModeReg, 0x3D);
 8001574:	213d      	movs	r1, #61	@ 0x3d
 8001576:	2011      	movs	r0, #17
 8001578:	f7ff fe50 	bl	800121c <RC522_WriteReg>

    MFRC522_AntennaOn();
 800157c:	f7ff ffbd 	bl	80014fa <MFRC522_AntennaOn>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40020400 	.word	0x40020400

08001588 <MFRC522_Request>:

// Request to find cards in the field
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint16_t backBits;
    uint8_t buf[1];

    RC522_WriteReg(BitFramingReg, 0x07); // TxLastBits = 7
 8001594:	2107      	movs	r1, #7
 8001596:	200d      	movs	r0, #13
 8001598:	f7ff fe40 	bl	800121c <RC522_WriteReg>

    buf[0] = reqMode;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	723b      	strb	r3, [r7, #8]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buf, 1, TagType, &backBits);
 80015a0:	f107 0108 	add.w	r1, r7, #8
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	200c      	movs	r0, #12
 80015b0:	f7ff fed2 	bl	8001358 <MFRC522_ToCard>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
    if ((status != MI_OK) || (backBits != 0x10)) {
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <MFRC522_Request+0x3c>
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d001      	beq.n	80015c8 <MFRC522_Request+0x40>
        status = MI_ERR;
 80015c4:	2302      	movs	r3, #2
 80015c6:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <MFRC522_Anticoll>:

// Anti-collision to get UID
uint8_t MFRC522_Anticoll(uint8_t *serNum) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af02      	add	r7, sp, #8
 80015d8:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    uint8_t buf[2];

    RC522_WriteReg(BitFramingReg, 0x00); // Reset bit framing
 80015de:	2100      	movs	r1, #0
 80015e0:	200d      	movs	r0, #13
 80015e2:	f7ff fe1b 	bl	800121c <RC522_WriteReg>

    buf[0] = PICC_ANTICOLL;
 80015e6:	2393      	movs	r3, #147	@ 0x93
 80015e8:	723b      	strb	r3, [r7, #8]
    buf[1] = 0x20;
 80015ea:	2320      	movs	r3, #32
 80015ec:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ToCard(PCD_TRANSCEIVE, buf, 2, serNum, &unLen);
 80015ee:	f107 0108 	add.w	r1, r7, #8
 80015f2:	f107 030a 	add.w	r3, r7, #10
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	200c      	movs	r0, #12
 80015fe:	f7ff feab 	bl	8001358 <MFRC522_ToCard>
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK) {
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d117      	bne.n	800163c <MFRC522_Anticoll+0x6a>
        // serNum contains 5 bytes, last is BCC
        for (i = 0; i < 4; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	73bb      	strb	r3, [r7, #14]
 8001610:	e009      	b.n	8001626 <MFRC522_Anticoll+0x54>
            serNumCheck ^= serNum[i];
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	7b7b      	ldrb	r3, [r7, #13]
 800161c:	4053      	eors	r3, r2
 800161e:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	3301      	adds	r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d9f2      	bls.n	8001612 <MFRC522_Anticoll+0x40>
        }
        if (serNumCheck != serNum[4]) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	7b7a      	ldrb	r2, [r7, #13]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <MFRC522_Anticoll+0x6a>
            status = MI_ERR;
 8001638:	2302      	movs	r3, #2
 800163a:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <MFRC522_Check>:

// High-level check (Request + Anticollision) to get UID
uint8_t MFRC522_Check(uint8_t *id) {
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t TagType[2];

    status = MFRC522_Request(PICC_REQIDL, TagType);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	2026      	movs	r0, #38	@ 0x26
 8001656:	f7ff ff97 	bl	8001588 <MFRC522_Request>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
    if (status == MI_OK) {
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d104      	bne.n	800166e <MFRC522_Check+0x28>
        status = MFRC522_Anticoll(id);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffb4 	bl	80015d2 <MFRC522_Anticoll>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b6:	2007      	movs	r0, #7
 80016b8:	f000 fb3e 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12c      	bne.n	8001744 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001706:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001718:	2304      	movs	r3, #4
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	@ (8001754 <HAL_I2C_MspInit+0x8c>)
 8001724:	f000 fb4a 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001736:	6413      	str	r3, [r2, #64]	@ 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_SPI_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12c      	bne.n	80017d4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017b2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c4:	2305      	movs	r3, #5
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_SPI_MspInit+0x8c>)
 80017d0:	f000 faf4 	bl	8001dbc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40003800 	.word	0x40003800
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a19      	ldr	r2, [pc, #100]	@ (800186c <HAL_UART_MspInit+0x84>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12b      	bne.n	8001862 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_UART_MspInit+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a17      	ldr	r2, [pc, #92]	@ (8001870 <HAL_UART_MspInit+0x88>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_UART_MspInit+0x88>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_UART_MspInit+0x88>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_UART_MspInit+0x88>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001842:	230c      	movs	r3, #12
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001852:	2307      	movs	r3, #7
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	@ (8001874 <HAL_UART_MspInit+0x8c>)
 800185e:	f000 faad 	bl	8001dbc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40004400 	.word	0x40004400
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ce:	f000 f91f 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018de:	f000 fc4d 	bl	800217c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e00a      	b.n	800190e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f8:	f3af 8000 	nop.w
 80018fc:	4601      	mov	r1, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	60ba      	str	r2, [r7, #8]
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf0      	blt.n	80018f8 <_read+0x12>
  }

  return len;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001948:	605a      	str	r2, [r3, #4]
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_isatty>:

int _isatty(int file)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f003 fb0e 	bl	8004fd8 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20020000 	.word	0x20020000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000194 	.word	0x20000194
 80019f0:	200002e8 	.word	0x200002e8

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a1c:	f7ff ffea 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	@ (8001a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f003 facd 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7fe ff3b 	bl	80008c4 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a5c:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8001a60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a64:	200002e8 	.word	0x200002e8

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f94f 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fdea 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f967 	bl	8001da2 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 f92f 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	@ (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000010 	.word	0x20000010
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	20000014 	.word	0x20000014

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000018 	.word	0x20000018
 8001b34:	20000198 	.word	0x20000198

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000198 	.word	0x20000198

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000018 	.word	0x20000018

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	@ (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	@ (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	@ (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff3e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff31 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e165      	b.n	80020a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8154 	bne.w	800209e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80ae 	beq.w	800209e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b5d      	ldr	r3, [pc, #372]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f52:	4b5a      	ldr	r3, [pc, #360]	@ (80020bc <HAL_GPIO_Init+0x300>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5e:	4a58      	ldr	r2, [pc, #352]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4f      	ldr	r2, [pc, #316]	@ (80020c4 <HAL_GPIO_Init+0x308>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d025      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d01f      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4d      	ldr	r2, [pc, #308]	@ (80020cc <HAL_GPIO_Init+0x310>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80020d0 <HAL_GPIO_Init+0x314>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80020d4 <HAL_GPIO_Init+0x318>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x20a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4a      	ldr	r2, [pc, #296]	@ (80020d8 <HAL_GPIO_Init+0x31c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x206>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a49      	ldr	r2, [pc, #292]	@ (80020dc <HAL_GPIO_Init+0x320>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x202>
 8001fba:	2306      	movs	r3, #6
 8001fbc:	e00c      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	e00a      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x21c>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4935      	ldr	r1, [pc, #212]	@ (80020c0 <HAL_GPIO_Init+0x304>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201a:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002020:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002044:	4a26      	ldr	r2, [pc, #152]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800206e:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002098:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <HAL_GPIO_Init+0x324>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f ae96 	bls.w	8001dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40021400 	.word	0x40021400
 80020dc:	40021800 	.word	0x40021800
 80020e0:	40013c00 	.word	0x40013c00

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002158:	887a      	ldrh	r2, [r7, #2]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	041a      	lsls	r2, r3, #16
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43d9      	mvns	r1, r3
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	400b      	ands	r3, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f806 	bl	80021ac <HAL_GPIO_EXTI_Callback>
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e12b      	b.n	800242e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fa6c 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	@ 0x24
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002228:	f000 fd5c 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a81      	ldr	r2, [pc, #516]	@ (8002438 <HAL_I2C_Init+0x274>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d807      	bhi.n	8002248 <HAL_I2C_Init+0x84>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a80      	ldr	r2, [pc, #512]	@ (800243c <HAL_I2C_Init+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e006      	b.n	8002256 <HAL_I2C_Init+0x92>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a7d      	ldr	r2, [pc, #500]	@ (8002440 <HAL_I2C_Init+0x27c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0e7      	b.n	800242e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a78      	ldr	r2, [pc, #480]	@ (8002444 <HAL_I2C_Init+0x280>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a6a      	ldr	r2, [pc, #424]	@ (8002438 <HAL_I2C_Init+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d802      	bhi.n	8002298 <HAL_I2C_Init+0xd4>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	e009      	b.n	80022ac <HAL_I2C_Init+0xe8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a69      	ldr	r2, [pc, #420]	@ (8002448 <HAL_I2C_Init+0x284>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	3301      	adds	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	495c      	ldr	r1, [pc, #368]	@ (8002438 <HAL_I2C_Init+0x274>)
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d819      	bhi.n	8002300 <HAL_I2C_Init+0x13c>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e59      	subs	r1, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022da:	1c59      	adds	r1, r3, #1
 80022dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_I2C_Init+0x138>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e59      	subs	r1, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	e051      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e04f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_I2C_Init+0x168>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e012      	b.n	8002352 <HAL_I2C_Init+0x18e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x196>
 8002356:	2301      	movs	r3, #1
 8002358:	e022      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_I2C_Init+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e58      	subs	r0, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	fbb0 f3f3 	udiv	r3, r0, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6809      	ldr	r1, [r1, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6911      	ldr	r1, [r2, #16]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	000186a0 	.word	0x000186a0
 800243c:	001e847f 	.word	0x001e847f
 8002440:	003d08ff 	.word	0x003d08ff
 8002444:	431bde83 	.word	0x431bde83
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
 800245c:	4613      	mov	r3, r2
 800245e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff fb6a 	bl	8001b38 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	f040 80e0 	bne.w	8002634 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2319      	movs	r3, #25
 800247a:	2201      	movs	r2, #1
 800247c:	4970      	ldr	r1, [pc, #448]	@ (8002640 <HAL_I2C_Master_Transmit+0x1f4>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f964 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	e0d3      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2C_Master_Transmit+0x50>
 8002498:	2302      	movs	r3, #2
 800249a:	e0cc      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d007      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	@ 0x21
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2210      	movs	r2, #16
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a50      	ldr	r2, [pc, #320]	@ (8002644 <HAL_I2C_Master_Transmit+0x1f8>)
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f89c 	bl	8002648 <I2C_MasterRequestWrite>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e08d      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002530:	e066      	b.n	8002600 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fa22 	bl	8002980 <I2C_WaitOnTXEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	2b04      	cmp	r3, #4
 8002548:	d107      	bne.n	800255a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06b      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d11b      	bne.n	80025d4 <HAL_I2C_Master_Transmit+0x188>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d017      	beq.n	80025d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	6a39      	ldr	r1, [r7, #32]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa19 	bl	8002a10 <I2C_WaitOnBTFFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e01a      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d194      	bne.n	8002532 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	00100002 	.word	0x00100002
 8002644:	ffff0000 	.word	0xffff0000

08002648 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	460b      	mov	r3, r1
 8002656:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d006      	beq.n	8002672 <I2C_MasterRequestWrite+0x2a>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d003      	beq.n	8002672 <I2C_MasterRequestWrite+0x2a>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002670:	d108      	bne.n	8002684 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00b      	b.n	800269c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	2b12      	cmp	r3, #18
 800268a:	d107      	bne.n	800269c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800269a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f84f 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c2:	d103      	bne.n	80026cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e035      	b.n	800273c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026d8:	d108      	bne.n	80026ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e01b      	b.n	8002724 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026ec:	897b      	ldrh	r3, [r7, #10]
 80026ee:	11db      	asrs	r3, r3, #7
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0306 	and.w	r3, r3, #6
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f063 030f 	orn	r3, r3, #15
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	490e      	ldr	r1, [pc, #56]	@ (8002744 <I2C_MasterRequestWrite+0xfc>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f898 	bl	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e010      	b.n	800273c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4907      	ldr	r1, [pc, #28]	@ (8002748 <I2C_MasterRequestWrite+0x100>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f888 	bl	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	00010008 	.word	0x00010008
 8002748:	00010002 	.word	0x00010002

0800274c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800275c:	e048      	b.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d044      	beq.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7ff f9e7 	bl	8001b38 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d139      	bne.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10d      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	e00c      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	43da      	mvns	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d116      	bne.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e023      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10d      	bne.n	8002816 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	e00c      	b.n	8002830 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	43da      	mvns	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	429a      	cmp	r2, r3
 8002834:	d093      	beq.n	800275e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284e:	e071      	b.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285e:	d123      	bne.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e067      	b.n	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d041      	beq.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7ff f942 	bl	8001b38 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d136      	bne.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10c      	bne.n	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf14      	ite	ne
 80028e2:	2301      	movne	r3, #1
 80028e4:	2300      	moveq	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e00b      	b.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e021      	b.n	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	0c1b      	lsrs	r3, r3, #16
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10c      	bne.n	8002958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	43da      	mvns	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4013      	ands	r3, r2
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e00b      	b.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	f47f af6d 	bne.w	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298c:	e034      	b.n	80029f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f886 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d028      	beq.n	80029f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7ff f8c7 	bl	8001b38 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b80      	cmp	r3, #128	@ 0x80
 80029c8:	d016      	beq.n	80029f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e007      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	2b80      	cmp	r3, #128	@ 0x80
 8002a04:	d1c3      	bne.n	800298e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a1c:	e034      	b.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f83e 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d028      	beq.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7ff f87f 	bl	8001b38 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11d      	bne.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d016      	beq.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d1c3      	bne.n	8002a1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d11b      	bne.n	8002af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f043 0204 	orr.w	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe ffa2 	bl	8001b38 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe ff9e 	bl	8001b38 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f855 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe ff02 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08006544 	.word	0x08006544
 8002cc4:	20000010 	.word	0x20000010
 8002cc8:	20000014 	.word	0x20000014

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000010 	.word	0x20000010

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce8:	f7ff fff0 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4903      	ldr	r1, [pc, #12]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08006554 	.word	0x08006554

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d10:	f7ff ffdc 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0b5b      	lsrs	r3, r3, #13
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4903      	ldr	r1, [pc, #12]	@ (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08006554 	.word	0x08006554

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b0ae      	sub	sp, #184	@ 0xb8
 8002d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5a:	4bcb      	ldr	r3, [pc, #812]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	f200 8206 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x440>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08003175 	.word	0x08003175
 8002d78:	08003175 	.word	0x08003175
 8002d7c:	08003175 	.word	0x08003175
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08003175 	.word	0x08003175
 8002d88:	08003175 	.word	0x08003175
 8002d8c:	08003175 	.word	0x08003175
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08003175 	.word	0x08003175
 8002d98:	08003175 	.word	0x08003175
 8002d9c:	08003175 	.word	0x08003175
 8002da0:	08002fa5 	.word	0x08002fa5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4bb9      	ldr	r3, [pc, #740]	@ (800308c <HAL_RCC_GetSysClockFreq+0x358>)
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002daa:	e1e7      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dac:	4bb8      	ldr	r3, [pc, #736]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002db2:	e1e3      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4bb4      	ldr	r3, [pc, #720]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc0:	4bb1      	ldr	r3, [pc, #708]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d071      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4bae      	ldr	r3, [pc, #696]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dd8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e24:	4649      	mov	r1, r9
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4641      	mov	r1, r8
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4641      	mov	r1, r8
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e38:	4649      	mov	r1, r9
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	00cb      	lsls	r3, r1, #3
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e56:	4641      	mov	r1, r8
 8002e58:	00ca      	lsls	r2, r1, #3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4622      	mov	r2, r4
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e66:	462b      	mov	r3, r5
 8002e68:	460a      	mov	r2, r1
 8002e6a:	eb42 0303 	adc.w	r3, r2, r3
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	024b      	lsls	r3, r1, #9
 8002e80:	4621      	mov	r1, r4
 8002e82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e86:	4621      	mov	r1, r4
 8002e88:	024a      	lsls	r2, r1, #9
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ea0:	f7fd fa16 	bl	80002d0 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eae:	e067      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4b75      	ldr	r3, [pc, #468]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ebc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eca:	2300      	movs	r3, #0
 8002ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ece:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f04:	4649      	mov	r1, r9
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4641      	mov	r1, r8
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4641      	mov	r1, r8
 8002f14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f18:	4649      	mov	r1, r9
 8002f1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f32:	4692      	mov	sl, r2
 8002f34:	469b      	mov	fp, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb1a 0303 	adds.w	r3, sl, r3
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	eb4b 0303 	adc.w	r3, fp, r3
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f68:	2200      	movs	r2, #0
 8002f6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f72:	f7fd f9ad 	bl	80002d0 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f80:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fa2:	e0eb      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb0:	4b35      	ldr	r3, [pc, #212]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d06b      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fce:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fd8:	4622      	mov	r2, r4
 8002fda:	462b      	mov	r3, r5
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	0159      	lsls	r1, r3, #5
 8002fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fea:	0150      	lsls	r0, r2, #5
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	1a51      	subs	r1, r2, r1
 8002ff4:	61b9      	str	r1, [r7, #24]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800300a:	4659      	mov	r1, fp
 800300c:	018b      	lsls	r3, r1, #6
 800300e:	4651      	mov	r1, sl
 8003010:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003014:	4651      	mov	r1, sl
 8003016:	018a      	lsls	r2, r1, #6
 8003018:	4651      	mov	r1, sl
 800301a:	ebb2 0801 	subs.w	r8, r2, r1
 800301e:	4659      	mov	r1, fp
 8003020:	eb63 0901 	sbc.w	r9, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003030:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003034:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003038:	4690      	mov	r8, r2
 800303a:	4699      	mov	r9, r3
 800303c:	4623      	mov	r3, r4
 800303e:	eb18 0303 	adds.w	r3, r8, r3
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	462b      	mov	r3, r5
 8003046:	eb49 0303 	adc.w	r3, r9, r3
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003058:	4629      	mov	r1, r5
 800305a:	024b      	lsls	r3, r1, #9
 800305c:	4621      	mov	r1, r4
 800305e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003062:	4621      	mov	r1, r4
 8003064:	024a      	lsls	r2, r1, #9
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800306e:	2200      	movs	r2, #0
 8003070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003072:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003074:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003078:	f7fd f92a 	bl	80002d0 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003086:	e065      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x420>
 8003088:	40023800 	.word	0x40023800
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003094:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCC_GetSysClockFreq+0x458>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	2200      	movs	r2, #0
 800309c:	4618      	mov	r0, r3
 800309e:	4611      	mov	r1, r2
 80030a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80030a6:	2300      	movs	r3, #0
 80030a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80030ae:	4642      	mov	r2, r8
 80030b0:	464b      	mov	r3, r9
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4641      	mov	r1, r8
 80030c8:	1a51      	subs	r1, r2, r1
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	4649      	mov	r1, r9
 80030ce:	eb63 0301 	sbc.w	r3, r3, r1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030e0:	4659      	mov	r1, fp
 80030e2:	018b      	lsls	r3, r1, #6
 80030e4:	4651      	mov	r1, sl
 80030e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ea:	4651      	mov	r1, sl
 80030ec:	018a      	lsls	r2, r1, #6
 80030ee:	4651      	mov	r1, sl
 80030f0:	1a54      	subs	r4, r2, r1
 80030f2:	4659      	mov	r1, fp
 80030f4:	eb63 0501 	sbc.w	r5, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	464b      	mov	r3, r9
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800313c:	2200      	movs	r2, #0
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003140:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003142:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003146:	f7fd f8c3 	bl	80002d0 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4613      	mov	r3, r2
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003154:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_RCC_GetSysClockFreq+0x458>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0f1b      	lsrs	r3, r3, #28
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003172:	e003      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800317a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003180:	4618      	mov	r0, r3
 8003182:	37b8      	adds	r7, #184	@ 0xb8
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400

08003194 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e28d      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8083 	beq.w	80032ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031b4:	4b94      	ldr	r3, [pc, #592]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d019      	beq.n	80031f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031c0:	4b91      	ldr	r3, [pc, #580]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d8:	d00c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b8b      	ldr	r3, [pc, #556]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d112      	bne.n	800320c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b88      	ldr	r3, [pc, #544]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f2:	d10b      	bne.n	800320c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	4b84      	ldr	r3, [pc, #528]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05b      	beq.n	80032b8 <HAL_RCC_OscConfig+0x124>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d157      	bne.n	80032b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e25a      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x90>
 8003216:	4b7c      	ldr	r3, [pc, #496]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7b      	ldr	r2, [pc, #492]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xcc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0xb4>
 800322e:	4b76      	ldr	r3, [pc, #472]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a75      	ldr	r2, [pc, #468]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b73      	ldr	r3, [pc, #460]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a72      	ldr	r2, [pc, #456]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xcc>
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6e      	ldr	r2, [pc, #440]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6b      	ldr	r2, [pc, #428]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fc66 	bl	8001b38 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fc62 	bl	8001b38 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e21f      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b61      	ldr	r3, [pc, #388]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xdc>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fc52 	bl	8001b38 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fc4e 	bl	8001b38 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e20b      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b57      	ldr	r3, [pc, #348]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x104>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d06f      	beq.n	80033a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032c6:	4b50      	ldr	r3, [pc, #320]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d105      	bne.n	80032ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032de:	4b4a      	ldr	r3, [pc, #296]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b47      	ldr	r3, [pc, #284]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b41      	ldr	r3, [pc, #260]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x186>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1d3      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4937      	ldr	r1, [pc, #220]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b34      	ldr	r3, [pc, #208]	@ (800340c <HAL_RCC_OscConfig+0x278>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fbfb 	bl	8001b38 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003346:	f7fe fbf7 	bl	8001b38 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1b4      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b2b      	ldr	r3, [pc, #172]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b28      	ldr	r3, [pc, #160]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4925      	ldr	r1, [pc, #148]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b24      	ldr	r3, [pc, #144]	@ (800340c <HAL_RCC_OscConfig+0x278>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fbda 	bl	8001b38 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003388:	f7fe fbd6 	bl	8001b38 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e193      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d036      	beq.n	8003420 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <HAL_RCC_OscConfig+0x27c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe fbba 	bl	8001b38 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fe fbb6 	bl	8001b38 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e173      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <HAL_RCC_OscConfig+0x274>)
 80033dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x234>
 80033e6:	e01b      	b.n	8003420 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fe fba3 	bl	8001b38 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	e00e      	b.n	8003414 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fe fb9f 	bl	8001b38 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d907      	bls.n	8003414 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e15c      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
 8003408:	40023800 	.word	0x40023800
 800340c:	42470000 	.word	0x42470000
 8003410:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	4b8a      	ldr	r3, [pc, #552]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ea      	bne.n	80033f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8097 	beq.w	800355c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003432:	4b83      	ldr	r3, [pc, #524]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b7f      	ldr	r3, [pc, #508]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	4a7e      	ldr	r2, [pc, #504]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344c:	6413      	str	r3, [r2, #64]	@ 0x40
 800344e:	4b7c      	ldr	r3, [pc, #496]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b79      	ldr	r3, [pc, #484]	@ (8003644 <HAL_RCC_OscConfig+0x4b0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b76      	ldr	r3, [pc, #472]	@ (8003644 <HAL_RCC_OscConfig+0x4b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	@ (8003644 <HAL_RCC_OscConfig+0x4b0>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe fb5f 	bl	8001b38 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe fb5b 	bl	8001b38 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e118      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b6c      	ldr	r3, [pc, #432]	@ (8003644 <HAL_RCC_OscConfig+0x4b0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x31e>
 80034a4:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	4a65      	ldr	r2, [pc, #404]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b0:	e01c      	b.n	80034ec <HAL_RCC_OscConfig+0x358>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x340>
 80034ba:	4b61      	ldr	r3, [pc, #388]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	4a60      	ldr	r2, [pc, #384]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	f043 0304 	orr.w	r3, r3, #4
 80034c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d2:	e00b      	b.n	80034ec <HAL_RCC_OscConfig+0x358>
 80034d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d8:	4a59      	ldr	r2, [pc, #356]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e0:	4b57      	ldr	r3, [pc, #348]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	f023 0304 	bic.w	r3, r3, #4
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fb20 	bl	8001b38 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe fb1c 	bl	8001b38 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0d7      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	4b4b      	ldr	r3, [pc, #300]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ee      	beq.n	80034fc <HAL_RCC_OscConfig+0x368>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe fb0a 	bl	8001b38 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fe fb06 	bl	8001b38 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0c1      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	4b40      	ldr	r3, [pc, #256]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ee      	bne.n	8003528 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	4a3a      	ldr	r2, [pc, #232]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80ad 	beq.w	80036c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b08      	cmp	r3, #8
 8003570:	d060      	beq.n	8003634 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d145      	bne.n	8003606 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b33      	ldr	r3, [pc, #204]	@ (8003648 <HAL_RCC_OscConfig+0x4b4>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fada 	bl	8001b38 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fad6 	bl	8001b38 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e093      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b29      	ldr	r3, [pc, #164]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	071b      	lsls	r3, r3, #28
 80035d2:	491b      	ldr	r1, [pc, #108]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x4b4>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe faab 	bl	8001b38 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe faa7 	bl	8001b38 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e064      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x452>
 8003604:	e05c      	b.n	80036c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_RCC_OscConfig+0x4b4>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fa94 	bl	8001b38 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fa90 	bl	8001b38 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04d      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x480>
 8003632:	e045      	b.n	80036c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e040      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000
 8003648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <HAL_RCC_OscConfig+0x538>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d030      	beq.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d129      	bne.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d122      	bne.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	4293      	cmp	r3, r2
 8003686:	d119      	bne.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d10f      	bne.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07b      	b.n	80037da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036f2:	d009      	beq.n	8003708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
 80036fa:	e005      	b.n	8003708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe f818 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800373e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0104 	and.w	r1, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	f003 0210 	and.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f2:	f7fe f9a1 	bl	8001b38 <HAL_GetTick>
 80037f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
 800380a:	e12a      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Transmit+0x36>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e122      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_SPI_Transmit+0x48>
 8003826:	2302      	movs	r3, #2
 8003828:	e11b      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2203      	movs	r2, #3
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003878:	d10f      	bne.n	800389a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d007      	beq.n	80038b8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c0:	d152      	bne.n	8003968 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_SPI_Transmit+0xee>
 80038ca:	8b7b      	ldrh	r3, [r7, #26]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d145      	bne.n	800395c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f4:	e032      	b.n	800395c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d112      	bne.n	800392a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003928:	e018      	b.n	800395c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800392a:	f7fe f905 	bl	8001b38 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d803      	bhi.n	8003942 <HAL_SPI_Transmit+0x160>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d102      	bne.n	8003948 <HAL_SPI_Transmit+0x166>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e082      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1c7      	bne.n	80038f6 <HAL_SPI_Transmit+0x114>
 8003966:	e053      	b.n	8003a10 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Transmit+0x194>
 8003970:	8b7b      	ldrh	r3, [r7, #26]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d147      	bne.n	8003a06 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800399c:	e033      	b.n	8003a06 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d113      	bne.n	80039d4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039d2:	e018      	b.n	8003a06 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d4:	f7fe f8b0 	bl	8001b38 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_Transmit+0x20a>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x210>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e02d      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1c6      	bne.n	800399e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fbd9 	bl	80041cc <SPI_EndRxTxTransaction>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	e104      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Receive+0x2c>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0fc      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa2:	d112      	bne.n	8003aca <HAL_SPI_Receive+0x60>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10e      	bne.n	8003aca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8eb 	bl	8003c9c <HAL_SPI_TransmitReceive>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	e0e4      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aca:	f7fe f835 	bl	8001b38 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_SPI_Receive+0x74>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0da      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b2c:	d10f      	bne.n	8003b4e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d007      	beq.n	8003b6c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d170      	bne.n	8003c56 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b74:	e035      	b.n	8003be2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d115      	bne.n	8003bb0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f103 020c 	add.w	r2, r3, #12
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bae:	e018      	b.n	8003be2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb0:	f7fd ffc2 	bl	8001b38 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d803      	bhi.n	8003bc8 <HAL_SPI_Receive+0x15e>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Receive+0x164>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e058      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1c4      	bne.n	8003b76 <HAL_SPI_Receive+0x10c>
 8003bec:	e038      	b.n	8003c60 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d113      	bne.n	8003c24 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	b292      	uxth	r2, r2
 8003c08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c22:	e018      	b.n	8003c56 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c24:	f7fd ff88 	bl	8001b38 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d803      	bhi.n	8003c3c <HAL_SPI_Receive+0x1d2>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Receive+0x1d8>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e01e      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1c6      	bne.n	8003bee <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa4b 	bl	8004100 <SPI_EndRxTransaction>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cae:	f7fd ff43 	bl	8001b38 <HAL_GetTick>
 8003cb2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cba:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00c      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x4a>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cd2:	d106      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x46>
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d001      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e17f      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x5c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x5c>
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e174      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_TransmitReceive+0x6e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e16d      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2205      	movs	r2, #5
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	887a      	ldrh	r2, [r7, #2]
 8003d4e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d007      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d82:	d17e      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0xf6>
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d16c      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	881a      	ldrh	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	1c9a      	adds	r2, r3, #2
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db6:	e059      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d11b      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x162>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x162>
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d113      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	881a      	ldrh	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	1c9a      	adds	r2, r3, #2
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d119      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x1a4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d014      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	b292      	uxth	r2, r2
 8003e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e40:	f7fd fe7a 	bl	8001b38 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d80d      	bhi.n	8003e6c <HAL_SPI_TransmitReceive+0x1d0>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d009      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0bc      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1a0      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x11c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d19b      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x11c>
 8003e80:	e082      	b.n	8003f88 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x1f4>
 8003e8a:	8afb      	ldrh	r3, [r7, #22]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d171      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb6:	e05d      	b.n	8003f74 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d11c      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x264>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d017      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x264>
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d114      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d119      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x2a6>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d014      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f42:	f7fd fdf9 	bl	8001b38 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <HAL_SPI_TransmitReceive+0x2be>
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x2c4>
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e038      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d19c      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x21c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d197      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f91d 	bl	80041cc <SPI_EndRxTxTransaction>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e01d      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3728      	adds	r7, #40	@ 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004000:	f7fd fd9a 	bl	8001b38 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	4413      	add	r3, r2
 800400e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004010:	f7fd fd92 	bl	8001b38 <HAL_GetTick>
 8004014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004016:	4b39      	ldr	r3, [pc, #228]	@ (80040fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	015b      	lsls	r3, r3, #5
 800401c:	0d1b      	lsrs	r3, r3, #20
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004026:	e055      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d051      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004030:	f7fd fd82 	bl	8001b38 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d902      	bls.n	8004046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d13d      	bne.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800405e:	d111      	bne.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004068:	d004      	beq.n	8004074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004072:	d107      	bne.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408c:	d10f      	bne.n	80040ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e018      	b.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e002      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d19a      	bne.n	8004028 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000010 	.word	0x20000010

08004100 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004114:	d111      	bne.n	800413a <SPI_EndRxTransaction+0x3a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411e:	d004      	beq.n	800412a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004128:	d107      	bne.n	800413a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004138:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004142:	d12a      	bne.n	800419a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d012      	beq.n	8004174 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	@ 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff ff49 	bl	8003ff0 <SPI_WaitFlagStateUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02d      	beq.n	80041c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e026      	b.n	80041c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	2101      	movs	r1, #1
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff ff36 	bl	8003ff0 <SPI_WaitFlagStateUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e013      	b.n	80041c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2101      	movs	r1, #1
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ff23 	bl	8003ff0 <SPI_WaitFlagStateUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e000      	b.n	80041c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2201      	movs	r2, #1
 80041e0:	2102      	movs	r1, #2
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff04 	bl	8003ff0 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e032      	b.n	8004264 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <SPI_EndRxTxTransaction+0xa0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <SPI_EndRxTxTransaction+0xa4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	0d5b      	lsrs	r3, r3, #21
 800420a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800421c:	d112      	bne.n	8004244 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fee1 	bl	8003ff0 <SPI_WaitFlagStateUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e00f      	b.n	8004264 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	3b01      	subs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d0f2      	beq.n	8004244 <SPI_EndRxTxTransaction+0x78>
 800425e:	e000      	b.n	8004262 <SPI_EndRxTxTransaction+0x96>
        break;
 8004260:	bf00      	nop
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000010 	.word	0x20000010
 8004270:	165e9f81 	.word	0x165e9f81

08004274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e042      	b.n	800430c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd faa4 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	@ 0x24
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f973 	bl	80045a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b20      	cmp	r3, #32
 8004332:	d175      	bne.n	8004420 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Transmit+0x2c>
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e06e      	b.n	8004422 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2221      	movs	r2, #33	@ 0x21
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004352:	f7fd fbf1 	bl	8001b38 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	88fa      	ldrh	r2, [r7, #6]
 800435c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436c:	d108      	bne.n	8004380 <HAL_UART_Transmit+0x6c>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e003      	b.n	8004388 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004388:	e02e      	b.n	80043e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f848 	bl	800442a <UART_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e03a      	b.n	8004422 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	3302      	adds	r3, #2
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e007      	b.n	80043da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cb      	bne.n	800438a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	@ 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f814 	bl	800442a <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e006      	b.n	8004422 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443a:	e03b      	b.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d037      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fd fb78 	bl	8001b38 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <UART_WaitOnFlagUntilTimeout+0x30>
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e03a      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d023      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b80      	cmp	r3, #128	@ 0x80
 8004470:	d020      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d01d      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	d116      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f81d 	bl	80044dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2208      	movs	r2, #8
 80044a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e00f      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d0b4      	beq.n	800443c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b095      	sub	sp, #84	@ 0x54
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004504:	643a      	str	r2, [r7, #64]	@ 0x40
 8004506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800450a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	61fb      	str	r3, [r7, #28]
   return(result);
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004538:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800453e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	2b01      	cmp	r3, #1
 8004552:	d119      	bne.n	8004588 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	60bb      	str	r3, [r7, #8]
   return(result);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 0310 	bic.w	r3, r3, #16
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004574:	61ba      	str	r2, [r7, #24]
 8004576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	613b      	str	r3, [r7, #16]
   return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e5      	bne.n	8004554 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004596:	bf00      	nop
 8004598:	3754      	adds	r7, #84	@ 0x54
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b0c0      	sub	sp, #256	@ 0x100
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	68d9      	ldr	r1, [r3, #12]
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	ea40 0301 	orr.w	r3, r0, r1
 80045cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045fc:	f021 010c 	bic.w	r1, r1, #12
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800460a:	430b      	orrs	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461e:	6999      	ldr	r1, [r3, #24]
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	ea40 0301 	orr.w	r3, r0, r1
 800462a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8f      	ldr	r3, [pc, #572]	@ (8004870 <UART_SetConfig+0x2cc>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d005      	beq.n	8004644 <UART_SetConfig+0xa0>
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8d      	ldr	r3, [pc, #564]	@ (8004874 <UART_SetConfig+0x2d0>)
 8004640:	429a      	cmp	r2, r3
 8004642:	d104      	bne.n	800464e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe fb62 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8004648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800464c:	e003      	b.n	8004656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fe fb49 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8004652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004660:	f040 810c 	bne.w	800487c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800466e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	1891      	adds	r1, r2, r2
 800467c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800467e:	415b      	adcs	r3, r3
 8004680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004686:	4621      	mov	r1, r4
 8004688:	eb12 0801 	adds.w	r8, r2, r1
 800468c:	4629      	mov	r1, r5
 800468e:	eb43 0901 	adc.w	r9, r3, r1
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a6:	4690      	mov	r8, r2
 80046a8:	4699      	mov	r9, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	eb18 0303 	adds.w	r3, r8, r3
 80046b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b4:	462b      	mov	r3, r5
 80046b6:	eb49 0303 	adc.w	r3, r9, r3
 80046ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046d2:	460b      	mov	r3, r1
 80046d4:	18db      	adds	r3, r3, r3
 80046d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d8:	4613      	mov	r3, r2
 80046da:	eb42 0303 	adc.w	r3, r2, r3
 80046de:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e8:	f7fb fdf2 	bl	80002d0 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b61      	ldr	r3, [pc, #388]	@ (8004878 <UART_SetConfig+0x2d4>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	011c      	lsls	r4, r3, #4
 80046fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004714:	415b      	adcs	r3, r3
 8004716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800471c:	4641      	mov	r1, r8
 800471e:	eb12 0a01 	adds.w	sl, r2, r1
 8004722:	4649      	mov	r1, r9
 8004724:	eb43 0b01 	adc.w	fp, r3, r1
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473c:	4692      	mov	sl, r2
 800473e:	469b      	mov	fp, r3
 8004740:	4643      	mov	r3, r8
 8004742:	eb1a 0303 	adds.w	r3, sl, r3
 8004746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800474a:	464b      	mov	r3, r9
 800474c:	eb4b 0303 	adc.w	r3, fp, r3
 8004750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004768:	460b      	mov	r3, r1
 800476a:	18db      	adds	r3, r3, r3
 800476c:	643b      	str	r3, [r7, #64]	@ 0x40
 800476e:	4613      	mov	r3, r2
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	647b      	str	r3, [r7, #68]	@ 0x44
 8004776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800477a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800477e:	f7fb fda7 	bl	80002d0 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4611      	mov	r1, r2
 8004788:	4b3b      	ldr	r3, [pc, #236]	@ (8004878 <UART_SetConfig+0x2d4>)
 800478a:	fba3 2301 	umull	r2, r3, r3, r1
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2264      	movs	r2, #100	@ 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	1acb      	subs	r3, r1, r3
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800479e:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <UART_SetConfig+0x2d4>)
 80047a0:	fba3 2302 	umull	r2, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047ac:	441c      	add	r4, r3
 80047ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	1891      	adds	r1, r2, r2
 80047c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c8:	415b      	adcs	r3, r3
 80047ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047d0:	4641      	mov	r1, r8
 80047d2:	1851      	adds	r1, r2, r1
 80047d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047d6:	4649      	mov	r1, r9
 80047d8:	414b      	adcs	r3, r1
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e8:	4659      	mov	r1, fp
 80047ea:	00cb      	lsls	r3, r1, #3
 80047ec:	4651      	mov	r1, sl
 80047ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f2:	4651      	mov	r1, sl
 80047f4:	00ca      	lsls	r2, r1, #3
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	4642      	mov	r2, r8
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004804:	464b      	mov	r3, r9
 8004806:	460a      	mov	r2, r1
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800481c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004824:	460b      	mov	r3, r1
 8004826:	18db      	adds	r3, r3, r3
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800482a:	4613      	mov	r3, r2
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800483a:	f7fb fd49 	bl	80002d0 <__aeabi_uldivmod>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <UART_SetConfig+0x2d4>)
 8004844:	fba3 1302 	umull	r1, r3, r3, r2
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	2164      	movs	r1, #100	@ 0x64
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	3332      	adds	r3, #50	@ 0x32
 8004856:	4a08      	ldr	r2, [pc, #32]	@ (8004878 <UART_SetConfig+0x2d4>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f003 0207 	and.w	r2, r3, #7
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4422      	add	r2, r4
 800486a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800486c:	e106      	b.n	8004a7c <UART_SetConfig+0x4d8>
 800486e:	bf00      	nop
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800488a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800488e:	4642      	mov	r2, r8
 8004890:	464b      	mov	r3, r9
 8004892:	1891      	adds	r1, r2, r2
 8004894:	6239      	str	r1, [r7, #32]
 8004896:	415b      	adcs	r3, r3
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
 800489a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489e:	4641      	mov	r1, r8
 80048a0:	1854      	adds	r4, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb43 0501 	adc.w	r5, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	00eb      	lsls	r3, r5, #3
 80048b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b6:	00e2      	lsls	r2, r4, #3
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	18e3      	adds	r3, r4, r3
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c4:	464b      	mov	r3, r9
 80048c6:	eb45 0303 	adc.w	r3, r5, r3
 80048ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048ea:	4629      	mov	r1, r5
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f4:	4621      	mov	r1, r4
 80048f6:	008a      	lsls	r2, r1, #2
 80048f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048fc:	f7fb fce8 	bl	80002d0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b60      	ldr	r3, [pc, #384]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800491c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	61b9      	str	r1, [r7, #24]
 8004928:	415b      	adcs	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004930:	4641      	mov	r1, r8
 8004932:	1851      	adds	r1, r2, r1
 8004934:	6139      	str	r1, [r7, #16]
 8004936:	4649      	mov	r1, r9
 8004938:	414b      	adcs	r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	00cb      	lsls	r3, r1, #3
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004952:	4651      	mov	r1, sl
 8004954:	00ca      	lsls	r2, r1, #3
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	4603      	mov	r3, r0
 800495c:	4642      	mov	r2, r8
 800495e:	189b      	adds	r3, r3, r2
 8004960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004964:	464b      	mov	r3, r9
 8004966:	460a      	mov	r2, r1
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800497a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004988:	4649      	mov	r1, r9
 800498a:	008b      	lsls	r3, r1, #2
 800498c:	4641      	mov	r1, r8
 800498e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004992:	4641      	mov	r1, r8
 8004994:	008a      	lsls	r2, r1, #2
 8004996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800499a:	f7fb fc99 	bl	80002d0 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <UART_SetConfig+0x4e4>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2264      	movs	r2, #100	@ 0x64
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	1acb      	subs	r3, r1, r3
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	3332      	adds	r3, #50	@ 0x32
 80049b8:	4a33      	ldr	r2, [pc, #204]	@ (8004a88 <UART_SetConfig+0x4e4>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c4:	441c      	add	r4, r3
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	415b      	adcs	r3, r3
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a16:	464b      	mov	r3, r9
 8004a18:	460a      	mov	r2, r1
 8004a1a:	eb42 0303 	adc.w	r3, r2, r3
 8004a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a38:	4649      	mov	r1, r9
 8004a3a:	008b      	lsls	r3, r1, #2
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a42:	4641      	mov	r1, r8
 8004a44:	008a      	lsls	r2, r1, #2
 8004a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a4a:	f7fb fc41 	bl	80002d0 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	@ 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	3332      	adds	r3, #50	@ 0x32
 8004a66:	4a08      	ldr	r2, [pc, #32]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4422      	add	r2, r4
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a82:	46bd      	mov	sp, r7
 8004a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a88:	51eb851f 	.word	0x51eb851f

08004a8c <std>:
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	4604      	mov	r4, r0
 8004a92:	e9c0 3300 	strd	r3, r3, [r0]
 8004a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a9a:	6083      	str	r3, [r0, #8]
 8004a9c:	8181      	strh	r1, [r0, #12]
 8004a9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004aa0:	81c2      	strh	r2, [r0, #14]
 8004aa2:	6183      	str	r3, [r0, #24]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	305c      	adds	r0, #92	@ 0x5c
 8004aaa:	f000 fa47 	bl	8004f3c <memset>
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <std+0x58>)
 8004ab0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <std+0x5c>)
 8004ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <std+0x60>)
 8004ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <std+0x64>)
 8004abc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <std+0x68>)
 8004ac0:	6224      	str	r4, [r4, #32]
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d006      	beq.n	8004ad4 <std+0x48>
 8004ac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aca:	4294      	cmp	r4, r2
 8004acc:	d002      	beq.n	8004ad4 <std+0x48>
 8004ace:	33d0      	adds	r3, #208	@ 0xd0
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d105      	bne.n	8004ae0 <std+0x54>
 8004ad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f000 baa6 	b.w	800502c <__retarget_lock_init_recursive>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08004d6d 	.word	0x08004d6d
 8004ae8:	08004d8f 	.word	0x08004d8f
 8004aec:	08004dc7 	.word	0x08004dc7
 8004af0:	08004deb 	.word	0x08004deb
 8004af4:	2000019c 	.word	0x2000019c

08004af8 <stdio_exit_handler>:
 8004af8:	4a02      	ldr	r2, [pc, #8]	@ (8004b04 <stdio_exit_handler+0xc>)
 8004afa:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <stdio_exit_handler+0x10>)
 8004afc:	4803      	ldr	r0, [pc, #12]	@ (8004b0c <stdio_exit_handler+0x14>)
 8004afe:	f000 b869 	b.w	8004bd4 <_fwalk_sglue>
 8004b02:	bf00      	nop
 8004b04:	2000001c 	.word	0x2000001c
 8004b08:	08005b79 	.word	0x08005b79
 8004b0c:	2000002c 	.word	0x2000002c

08004b10 <cleanup_stdio>:
 8004b10:	6841      	ldr	r1, [r0, #4]
 8004b12:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <cleanup_stdio+0x34>)
 8004b14:	4299      	cmp	r1, r3
 8004b16:	b510      	push	{r4, lr}
 8004b18:	4604      	mov	r4, r0
 8004b1a:	d001      	beq.n	8004b20 <cleanup_stdio+0x10>
 8004b1c:	f001 f82c 	bl	8005b78 <_fflush_r>
 8004b20:	68a1      	ldr	r1, [r4, #8]
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <cleanup_stdio+0x38>)
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d002      	beq.n	8004b2e <cleanup_stdio+0x1e>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f001 f825 	bl	8005b78 <_fflush_r>
 8004b2e:	68e1      	ldr	r1, [r4, #12]
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <cleanup_stdio+0x3c>)
 8004b32:	4299      	cmp	r1, r3
 8004b34:	d004      	beq.n	8004b40 <cleanup_stdio+0x30>
 8004b36:	4620      	mov	r0, r4
 8004b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3c:	f001 b81c 	b.w	8005b78 <_fflush_r>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	2000019c 	.word	0x2000019c
 8004b48:	20000204 	.word	0x20000204
 8004b4c:	2000026c 	.word	0x2000026c

08004b50 <global_stdio_init.part.0>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <global_stdio_init.part.0+0x30>)
 8004b54:	4c0b      	ldr	r4, [pc, #44]	@ (8004b84 <global_stdio_init.part.0+0x34>)
 8004b56:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <global_stdio_init.part.0+0x38>)
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2104      	movs	r1, #4
 8004b60:	f7ff ff94 	bl	8004a8c <std>
 8004b64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2109      	movs	r1, #9
 8004b6c:	f7ff ff8e 	bl	8004a8c <std>
 8004b70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b74:	2202      	movs	r2, #2
 8004b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b7a:	2112      	movs	r1, #18
 8004b7c:	f7ff bf86 	b.w	8004a8c <std>
 8004b80:	200002d4 	.word	0x200002d4
 8004b84:	2000019c 	.word	0x2000019c
 8004b88:	08004af9 	.word	0x08004af9

08004b8c <__sfp_lock_acquire>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__sfp_lock_acquire+0x8>)
 8004b8e:	f000 ba4e 	b.w	800502e <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	200002dd 	.word	0x200002dd

08004b98 <__sfp_lock_release>:
 8004b98:	4801      	ldr	r0, [pc, #4]	@ (8004ba0 <__sfp_lock_release+0x8>)
 8004b9a:	f000 ba49 	b.w	8005030 <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	200002dd 	.word	0x200002dd

08004ba4 <__sinit>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	f7ff fff0 	bl	8004b8c <__sfp_lock_acquire>
 8004bac:	6a23      	ldr	r3, [r4, #32]
 8004bae:	b11b      	cbz	r3, 8004bb8 <__sinit+0x14>
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb4:	f7ff bff0 	b.w	8004b98 <__sfp_lock_release>
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <__sinit+0x28>)
 8004bba:	6223      	str	r3, [r4, #32]
 8004bbc:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <__sinit+0x2c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f5      	bne.n	8004bb0 <__sinit+0xc>
 8004bc4:	f7ff ffc4 	bl	8004b50 <global_stdio_init.part.0>
 8004bc8:	e7f2      	b.n	8004bb0 <__sinit+0xc>
 8004bca:	bf00      	nop
 8004bcc:	08004b11 	.word	0x08004b11
 8004bd0:	200002d4 	.word	0x200002d4

08004bd4 <_fwalk_sglue>:
 8004bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	4607      	mov	r7, r0
 8004bda:	4688      	mov	r8, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	2600      	movs	r6, #0
 8004be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004be4:	f1b9 0901 	subs.w	r9, r9, #1
 8004be8:	d505      	bpl.n	8004bf6 <_fwalk_sglue+0x22>
 8004bea:	6824      	ldr	r4, [r4, #0]
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	d1f7      	bne.n	8004be0 <_fwalk_sglue+0xc>
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d907      	bls.n	8004c0c <_fwalk_sglue+0x38>
 8004bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d003      	beq.n	8004c0c <_fwalk_sglue+0x38>
 8004c04:	4629      	mov	r1, r5
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	4306      	orrs	r6, r0
 8004c0c:	3568      	adds	r5, #104	@ 0x68
 8004c0e:	e7e9      	b.n	8004be4 <_fwalk_sglue+0x10>

08004c10 <iprintf>:
 8004c10:	b40f      	push	{r0, r1, r2, r3}
 8004c12:	b507      	push	{r0, r1, r2, lr}
 8004c14:	4906      	ldr	r1, [pc, #24]	@ (8004c30 <iprintf+0x20>)
 8004c16:	ab04      	add	r3, sp, #16
 8004c18:	6808      	ldr	r0, [r1, #0]
 8004c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1e:	6881      	ldr	r1, [r0, #8]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	f000 fc81 	bl	8005528 <_vfiprintf_r>
 8004c26:	b003      	add	sp, #12
 8004c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c2c:	b004      	add	sp, #16
 8004c2e:	4770      	bx	lr
 8004c30:	20000028 	.word	0x20000028

08004c34 <putchar>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	@ (8004c40 <putchar+0xc>)
 8004c36:	4601      	mov	r1, r0
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	6882      	ldr	r2, [r0, #8]
 8004c3c:	f001 b826 	b.w	8005c8c <_putc_r>
 8004c40:	20000028 	.word	0x20000028

08004c44 <_puts_r>:
 8004c44:	6a03      	ldr	r3, [r0, #32]
 8004c46:	b570      	push	{r4, r5, r6, lr}
 8004c48:	6884      	ldr	r4, [r0, #8]
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	b90b      	cbnz	r3, 8004c54 <_puts_r+0x10>
 8004c50:	f7ff ffa8 	bl	8004ba4 <__sinit>
 8004c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c56:	07db      	lsls	r3, r3, #31
 8004c58:	d405      	bmi.n	8004c66 <_puts_r+0x22>
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	0598      	lsls	r0, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_puts_r+0x22>
 8004c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c62:	f000 f9e4 	bl	800502e <__retarget_lock_acquire_recursive>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	0719      	lsls	r1, r3, #28
 8004c6a:	d502      	bpl.n	8004c72 <_puts_r+0x2e>
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d135      	bne.n	8004cde <_puts_r+0x9a>
 8004c72:	4621      	mov	r1, r4
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f8fb 	bl	8004e70 <__swsetup_r>
 8004c7a:	b380      	cbz	r0, 8004cde <_puts_r+0x9a>
 8004c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c82:	07da      	lsls	r2, r3, #31
 8004c84:	d405      	bmi.n	8004c92 <_puts_r+0x4e>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	059b      	lsls	r3, r3, #22
 8004c8a:	d402      	bmi.n	8004c92 <_puts_r+0x4e>
 8004c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c8e:	f000 f9cf 	bl	8005030 <__retarget_lock_release_recursive>
 8004c92:	4628      	mov	r0, r5
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da04      	bge.n	8004ca4 <_puts_r+0x60>
 8004c9a:	69a2      	ldr	r2, [r4, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dc17      	bgt.n	8004cd0 <_puts_r+0x8c>
 8004ca0:	290a      	cmp	r1, #10
 8004ca2:	d015      	beq.n	8004cd0 <_puts_r+0x8c>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	7019      	strb	r1, [r3, #0]
 8004cac:	68a3      	ldr	r3, [r4, #8]
 8004cae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60a3      	str	r3, [r4, #8]
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d1ed      	bne.n	8004c96 <_puts_r+0x52>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da11      	bge.n	8004ce2 <_puts_r+0x9e>
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	210a      	movs	r1, #10
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f895 	bl	8004df2 <__swbuf_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d0d7      	beq.n	8004c7c <_puts_r+0x38>
 8004ccc:	250a      	movs	r5, #10
 8004cce:	e7d7      	b.n	8004c80 <_puts_r+0x3c>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f88d 	bl	8004df2 <__swbuf_r>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d1e7      	bne.n	8004cac <_puts_r+0x68>
 8004cdc:	e7ce      	b.n	8004c7c <_puts_r+0x38>
 8004cde:	3e01      	subs	r6, #1
 8004ce0:	e7e4      	b.n	8004cac <_puts_r+0x68>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	6022      	str	r2, [r4, #0]
 8004ce8:	220a      	movs	r2, #10
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e7ee      	b.n	8004ccc <_puts_r+0x88>
	...

08004cf0 <puts>:
 8004cf0:	4b02      	ldr	r3, [pc, #8]	@ (8004cfc <puts+0xc>)
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	f7ff bfa5 	b.w	8004c44 <_puts_r>
 8004cfa:	bf00      	nop
 8004cfc:	20000028 	.word	0x20000028

08004d00 <sniprintf>:
 8004d00:	b40c      	push	{r2, r3}
 8004d02:	b530      	push	{r4, r5, lr}
 8004d04:	4b18      	ldr	r3, [pc, #96]	@ (8004d68 <sniprintf+0x68>)
 8004d06:	1e0c      	subs	r4, r1, #0
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	b09d      	sub	sp, #116	@ 0x74
 8004d0c:	da08      	bge.n	8004d20 <sniprintf+0x20>
 8004d0e:	238b      	movs	r3, #139	@ 0x8b
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b01d      	add	sp, #116	@ 0x74
 8004d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1c:	b002      	add	sp, #8
 8004d1e:	4770      	bx	lr
 8004d20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004d2e:	bf14      	ite	ne
 8004d30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d34:	4623      	moveq	r3, r4
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9307      	str	r3, [sp, #28]
 8004d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d3e:	9002      	str	r0, [sp, #8]
 8004d40:	9006      	str	r0, [sp, #24]
 8004d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d48:	ab21      	add	r3, sp, #132	@ 0x84
 8004d4a:	a902      	add	r1, sp, #8
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	f000 fac4 	bl	80052dc <_svfiprintf_r>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	bfbc      	itt	lt
 8004d58:	238b      	movlt	r3, #139	@ 0x8b
 8004d5a:	602b      	strlt	r3, [r5, #0]
 8004d5c:	2c00      	cmp	r4, #0
 8004d5e:	d0da      	beq.n	8004d16 <sniprintf+0x16>
 8004d60:	9b02      	ldr	r3, [sp, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e7d6      	b.n	8004d16 <sniprintf+0x16>
 8004d68:	20000028 	.word	0x20000028

08004d6c <__sread>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d74:	f000 f90c 	bl	8004f90 <_read_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	bfab      	itete	ge
 8004d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d80:	181b      	addge	r3, r3, r0
 8004d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d86:	bfac      	ite	ge
 8004d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d8a:	81a3      	strhlt	r3, [r4, #12]
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <__swrite>:
 8004d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d92:	461f      	mov	r7, r3
 8004d94:	898b      	ldrh	r3, [r1, #12]
 8004d96:	05db      	lsls	r3, r3, #23
 8004d98:	4605      	mov	r5, r0
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	d505      	bpl.n	8004dac <__swrite+0x1e>
 8004da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da4:	2302      	movs	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	f000 f8e0 	bl	8004f6c <_lseek_r>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	4632      	mov	r2, r6
 8004dba:	463b      	mov	r3, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	f000 b8f7 	b.w	8004fb4 <_write_r>

08004dc6 <__sseek>:
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	460c      	mov	r4, r1
 8004dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dce:	f000 f8cd 	bl	8004f6c <_lseek_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	bf15      	itete	ne
 8004dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004de2:	81a3      	strheq	r3, [r4, #12]
 8004de4:	bf18      	it	ne
 8004de6:	81a3      	strhne	r3, [r4, #12]
 8004de8:	bd10      	pop	{r4, pc}

08004dea <__sclose>:
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 b8ad 	b.w	8004f4c <_close_r>

08004df2 <__swbuf_r>:
 8004df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df4:	460e      	mov	r6, r1
 8004df6:	4614      	mov	r4, r2
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b118      	cbz	r0, 8004e04 <__swbuf_r+0x12>
 8004dfc:	6a03      	ldr	r3, [r0, #32]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <__swbuf_r+0x12>
 8004e00:	f7ff fed0 	bl	8004ba4 <__sinit>
 8004e04:	69a3      	ldr	r3, [r4, #24]
 8004e06:	60a3      	str	r3, [r4, #8]
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	071a      	lsls	r2, r3, #28
 8004e0c:	d501      	bpl.n	8004e12 <__swbuf_r+0x20>
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	b943      	cbnz	r3, 8004e24 <__swbuf_r+0x32>
 8004e12:	4621      	mov	r1, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 f82b 	bl	8004e70 <__swsetup_r>
 8004e1a:	b118      	cbz	r0, 8004e24 <__swbuf_r+0x32>
 8004e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e20:	4638      	mov	r0, r7
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	6922      	ldr	r2, [r4, #16]
 8004e28:	1a98      	subs	r0, r3, r2
 8004e2a:	6963      	ldr	r3, [r4, #20]
 8004e2c:	b2f6      	uxtb	r6, r6
 8004e2e:	4283      	cmp	r3, r0
 8004e30:	4637      	mov	r7, r6
 8004e32:	dc05      	bgt.n	8004e40 <__swbuf_r+0x4e>
 8004e34:	4621      	mov	r1, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fe9e 	bl	8005b78 <_fflush_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d1ed      	bne.n	8004e1c <__swbuf_r+0x2a>
 8004e40:	68a3      	ldr	r3, [r4, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	60a3      	str	r3, [r4, #8]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	6022      	str	r2, [r4, #0]
 8004e4c:	701e      	strb	r6, [r3, #0]
 8004e4e:	6962      	ldr	r2, [r4, #20]
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d004      	beq.n	8004e60 <__swbuf_r+0x6e>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	07db      	lsls	r3, r3, #31
 8004e5a:	d5e1      	bpl.n	8004e20 <__swbuf_r+0x2e>
 8004e5c:	2e0a      	cmp	r6, #10
 8004e5e:	d1df      	bne.n	8004e20 <__swbuf_r+0x2e>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 fe88 	bl	8005b78 <_fflush_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d0d9      	beq.n	8004e20 <__swbuf_r+0x2e>
 8004e6c:	e7d6      	b.n	8004e1c <__swbuf_r+0x2a>
	...

08004e70 <__swsetup_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <__swsetup_r+0xa8>)
 8004e74:	4605      	mov	r5, r0
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	460c      	mov	r4, r1
 8004e7a:	b118      	cbz	r0, 8004e84 <__swsetup_r+0x14>
 8004e7c:	6a03      	ldr	r3, [r0, #32]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <__swsetup_r+0x14>
 8004e80:	f7ff fe90 	bl	8004ba4 <__sinit>
 8004e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e88:	0719      	lsls	r1, r3, #28
 8004e8a:	d422      	bmi.n	8004ed2 <__swsetup_r+0x62>
 8004e8c:	06da      	lsls	r2, r3, #27
 8004e8e:	d407      	bmi.n	8004ea0 <__swsetup_r+0x30>
 8004e90:	2209      	movs	r2, #9
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	e033      	b.n	8004f08 <__swsetup_r+0x98>
 8004ea0:	0758      	lsls	r0, r3, #29
 8004ea2:	d512      	bpl.n	8004eca <__swsetup_r+0x5a>
 8004ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ea6:	b141      	cbz	r1, 8004eba <__swsetup_r+0x4a>
 8004ea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eac:	4299      	cmp	r1, r3
 8004eae:	d002      	beq.n	8004eb6 <__swsetup_r+0x46>
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f8bf 	bl	8005034 <_free_r>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	6063      	str	r3, [r4, #4]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	b94b      	cbnz	r3, 8004eea <__swsetup_r+0x7a>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee0:	d003      	beq.n	8004eea <__swsetup_r+0x7a>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 fe95 	bl	8005c14 <__smakebuf_r>
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	f013 0201 	ands.w	r2, r3, #1
 8004ef2:	d00a      	beq.n	8004f0a <__swsetup_r+0x9a>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60a2      	str	r2, [r4, #8]
 8004ef8:	6962      	ldr	r2, [r4, #20]
 8004efa:	4252      	negs	r2, r2
 8004efc:	61a2      	str	r2, [r4, #24]
 8004efe:	6922      	ldr	r2, [r4, #16]
 8004f00:	b942      	cbnz	r2, 8004f14 <__swsetup_r+0xa4>
 8004f02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f06:	d1c5      	bne.n	8004e94 <__swsetup_r+0x24>
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	0799      	lsls	r1, r3, #30
 8004f0c:	bf58      	it	pl
 8004f0e:	6962      	ldrpl	r2, [r4, #20]
 8004f10:	60a2      	str	r2, [r4, #8]
 8004f12:	e7f4      	b.n	8004efe <__swsetup_r+0x8e>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e7f7      	b.n	8004f08 <__swsetup_r+0x98>
 8004f18:	20000028 	.word	0x20000028

08004f1c <memcmp>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	3901      	subs	r1, #1
 8004f20:	4402      	add	r2, r0
 8004f22:	4290      	cmp	r0, r2
 8004f24:	d101      	bne.n	8004f2a <memcmp+0xe>
 8004f26:	2000      	movs	r0, #0
 8004f28:	e005      	b.n	8004f36 <memcmp+0x1a>
 8004f2a:	7803      	ldrb	r3, [r0, #0]
 8004f2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d001      	beq.n	8004f38 <memcmp+0x1c>
 8004f34:	1b18      	subs	r0, r3, r4
 8004f36:	bd10      	pop	{r4, pc}
 8004f38:	3001      	adds	r0, #1
 8004f3a:	e7f2      	b.n	8004f22 <memcmp+0x6>

08004f3c <memset>:
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_close_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4d06      	ldr	r5, [pc, #24]	@ (8004f68 <_close_r+0x1c>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	f7fc fce2 	bl	8001920 <_close>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_close_r+0x1a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_close_r+0x1a>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	200002d8 	.word	0x200002d8

08004f6c <_lseek_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	@ (8004f8c <_lseek_r+0x20>)
 8004f70:	4604      	mov	r4, r0
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7fc fcf7 	bl	800196e <_lseek>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_lseek_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_lseek_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200002d8 	.word	0x200002d8

08004f90 <_read_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	@ (8004fb0 <_read_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc fca1 	bl	80018e6 <_read>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_read_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_read_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	200002d8 	.word	0x200002d8

08004fb4 <_write_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	@ (8004fd4 <_write_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fb fc68 	bl	8000898 <_write>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_write_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_write_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	200002d8 	.word	0x200002d8

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	@ (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000028 	.word	0x20000028

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 ff0c 	bl	8005e14 <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08006598 	.word	0x08006598
 8005020:	08006598 	.word	0x08006598
 8005024:	08006598 	.word	0x08006598
 8005028:	0800659c 	.word	0x0800659c

0800502c <__retarget_lock_init_recursive>:
 800502c:	4770      	bx	lr

0800502e <__retarget_lock_acquire_recursive>:
 800502e:	4770      	bx	lr

08005030 <__retarget_lock_release_recursive>:
 8005030:	4770      	bx	lr
	...

08005034 <_free_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4605      	mov	r5, r0
 8005038:	2900      	cmp	r1, #0
 800503a:	d041      	beq.n	80050c0 <_free_r+0x8c>
 800503c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005040:	1f0c      	subs	r4, r1, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfb8      	it	lt
 8005046:	18e4      	addlt	r4, r4, r3
 8005048:	f000 f8e0 	bl	800520c <__malloc_lock>
 800504c:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <_free_r+0x90>)
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	b933      	cbnz	r3, 8005060 <_free_r+0x2c>
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	6014      	str	r4, [r2, #0]
 8005056:	4628      	mov	r0, r5
 8005058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505c:	f000 b8dc 	b.w	8005218 <__malloc_unlock>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d908      	bls.n	8005076 <_free_r+0x42>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	1821      	adds	r1, r4, r0
 8005068:	428b      	cmp	r3, r1
 800506a:	bf01      	itttt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	1809      	addeq	r1, r1, r0
 8005072:	6021      	streq	r1, [r4, #0]
 8005074:	e7ed      	b.n	8005052 <_free_r+0x1e>
 8005076:	461a      	mov	r2, r3
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b10b      	cbz	r3, 8005080 <_free_r+0x4c>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d9fa      	bls.n	8005076 <_free_r+0x42>
 8005080:	6811      	ldr	r1, [r2, #0]
 8005082:	1850      	adds	r0, r2, r1
 8005084:	42a0      	cmp	r0, r4
 8005086:	d10b      	bne.n	80050a0 <_free_r+0x6c>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	4401      	add	r1, r0
 800508c:	1850      	adds	r0, r2, r1
 800508e:	4283      	cmp	r3, r0
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	d1e0      	bne.n	8005056 <_free_r+0x22>
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	6053      	str	r3, [r2, #4]
 800509a:	4408      	add	r0, r1
 800509c:	6010      	str	r0, [r2, #0]
 800509e:	e7da      	b.n	8005056 <_free_r+0x22>
 80050a0:	d902      	bls.n	80050a8 <_free_r+0x74>
 80050a2:	230c      	movs	r3, #12
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	e7d6      	b.n	8005056 <_free_r+0x22>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf04      	itt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	bf04      	itt	eq
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6054      	str	r4, [r2, #4]
 80050be:	e7ca      	b.n	8005056 <_free_r+0x22>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	200002e4 	.word	0x200002e4

080050c8 <sbrk_aligned>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005108 <sbrk_aligned+0x40>)
 80050cc:	460c      	mov	r4, r1
 80050ce:	6831      	ldr	r1, [r6, #0]
 80050d0:	4605      	mov	r5, r0
 80050d2:	b911      	cbnz	r1, 80050da <sbrk_aligned+0x12>
 80050d4:	f000 fe4a 	bl	8005d6c <_sbrk_r>
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fe45 	bl	8005d6c <_sbrk_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d103      	bne.n	80050ee <sbrk_aligned+0x26>
 80050e6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ea:	4620      	mov	r0, r4
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d0f8      	beq.n	80050ea <sbrk_aligned+0x22>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fe36 	bl	8005d6c <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d1f2      	bne.n	80050ea <sbrk_aligned+0x22>
 8005104:	e7ef      	b.n	80050e6 <sbrk_aligned+0x1e>
 8005106:	bf00      	nop
 8005108:	200002e0 	.word	0x200002e0

0800510c <_malloc_r>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	1ccd      	adds	r5, r1, #3
 8005112:	f025 0503 	bic.w	r5, r5, #3
 8005116:	3508      	adds	r5, #8
 8005118:	2d0c      	cmp	r5, #12
 800511a:	bf38      	it	cc
 800511c:	250c      	movcc	r5, #12
 800511e:	2d00      	cmp	r5, #0
 8005120:	4606      	mov	r6, r0
 8005122:	db01      	blt.n	8005128 <_malloc_r+0x1c>
 8005124:	42a9      	cmp	r1, r5
 8005126:	d904      	bls.n	8005132 <_malloc_r+0x26>
 8005128:	230c      	movs	r3, #12
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	2000      	movs	r0, #0
 800512e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005208 <_malloc_r+0xfc>
 8005136:	f000 f869 	bl	800520c <__malloc_lock>
 800513a:	f8d8 3000 	ldr.w	r3, [r8]
 800513e:	461c      	mov	r4, r3
 8005140:	bb44      	cbnz	r4, 8005194 <_malloc_r+0x88>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff ffbf 	bl	80050c8 <sbrk_aligned>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	4604      	mov	r4, r0
 800514e:	d158      	bne.n	8005202 <_malloc_r+0xf6>
 8005150:	f8d8 4000 	ldr.w	r4, [r8]
 8005154:	4627      	mov	r7, r4
 8005156:	2f00      	cmp	r7, #0
 8005158:	d143      	bne.n	80051e2 <_malloc_r+0xd6>
 800515a:	2c00      	cmp	r4, #0
 800515c:	d04b      	beq.n	80051f6 <_malloc_r+0xea>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	eb04 0903 	add.w	r9, r4, r3
 8005168:	f000 fe00 	bl	8005d6c <_sbrk_r>
 800516c:	4581      	cmp	r9, r0
 800516e:	d142      	bne.n	80051f6 <_malloc_r+0xea>
 8005170:	6821      	ldr	r1, [r4, #0]
 8005172:	1a6d      	subs	r5, r5, r1
 8005174:	4629      	mov	r1, r5
 8005176:	4630      	mov	r0, r6
 8005178:	f7ff ffa6 	bl	80050c8 <sbrk_aligned>
 800517c:	3001      	adds	r0, #1
 800517e:	d03a      	beq.n	80051f6 <_malloc_r+0xea>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	442b      	add	r3, r5
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	f8d8 3000 	ldr.w	r3, [r8]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	bb62      	cbnz	r2, 80051e8 <_malloc_r+0xdc>
 800518e:	f8c8 7000 	str.w	r7, [r8]
 8005192:	e00f      	b.n	80051b4 <_malloc_r+0xa8>
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	1b52      	subs	r2, r2, r5
 8005198:	d420      	bmi.n	80051dc <_malloc_r+0xd0>
 800519a:	2a0b      	cmp	r2, #11
 800519c:	d917      	bls.n	80051ce <_malloc_r+0xc2>
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	6025      	str	r5, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	6059      	strne	r1, [r3, #4]
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	bf08      	it	eq
 80051ac:	f8c8 1000 	streq.w	r1, [r8]
 80051b0:	5162      	str	r2, [r4, r5]
 80051b2:	604b      	str	r3, [r1, #4]
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f82f 	bl	8005218 <__malloc_unlock>
 80051ba:	f104 000b 	add.w	r0, r4, #11
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	f020 0007 	bic.w	r0, r0, #7
 80051c4:	1ac2      	subs	r2, r0, r3
 80051c6:	bf1c      	itt	ne
 80051c8:	1a1b      	subne	r3, r3, r0
 80051ca:	50a3      	strne	r3, [r4, r2]
 80051cc:	e7af      	b.n	800512e <_malloc_r+0x22>
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	bf0c      	ite	eq
 80051d4:	f8c8 2000 	streq.w	r2, [r8]
 80051d8:	605a      	strne	r2, [r3, #4]
 80051da:	e7eb      	b.n	80051b4 <_malloc_r+0xa8>
 80051dc:	4623      	mov	r3, r4
 80051de:	6864      	ldr	r4, [r4, #4]
 80051e0:	e7ae      	b.n	8005140 <_malloc_r+0x34>
 80051e2:	463c      	mov	r4, r7
 80051e4:	687f      	ldr	r7, [r7, #4]
 80051e6:	e7b6      	b.n	8005156 <_malloc_r+0x4a>
 80051e8:	461a      	mov	r2, r3
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d1fb      	bne.n	80051e8 <_malloc_r+0xdc>
 80051f0:	2300      	movs	r3, #0
 80051f2:	6053      	str	r3, [r2, #4]
 80051f4:	e7de      	b.n	80051b4 <_malloc_r+0xa8>
 80051f6:	230c      	movs	r3, #12
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f80c 	bl	8005218 <__malloc_unlock>
 8005200:	e794      	b.n	800512c <_malloc_r+0x20>
 8005202:	6005      	str	r5, [r0, #0]
 8005204:	e7d6      	b.n	80051b4 <_malloc_r+0xa8>
 8005206:	bf00      	nop
 8005208:	200002e4 	.word	0x200002e4

0800520c <__malloc_lock>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__malloc_lock+0x8>)
 800520e:	f7ff bf0e 	b.w	800502e <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	200002dc 	.word	0x200002dc

08005218 <__malloc_unlock>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__malloc_unlock+0x8>)
 800521a:	f7ff bf09 	b.w	8005030 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	200002dc 	.word	0x200002dc

08005224 <__ssputs_r>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	688e      	ldr	r6, [r1, #8]
 800522a:	461f      	mov	r7, r3
 800522c:	42be      	cmp	r6, r7
 800522e:	680b      	ldr	r3, [r1, #0]
 8005230:	4682      	mov	sl, r0
 8005232:	460c      	mov	r4, r1
 8005234:	4690      	mov	r8, r2
 8005236:	d82d      	bhi.n	8005294 <__ssputs_r+0x70>
 8005238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800523c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005240:	d026      	beq.n	8005290 <__ssputs_r+0x6c>
 8005242:	6965      	ldr	r5, [r4, #20]
 8005244:	6909      	ldr	r1, [r1, #16]
 8005246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800524a:	eba3 0901 	sub.w	r9, r3, r1
 800524e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005252:	1c7b      	adds	r3, r7, #1
 8005254:	444b      	add	r3, r9
 8005256:	106d      	asrs	r5, r5, #1
 8005258:	429d      	cmp	r5, r3
 800525a:	bf38      	it	cc
 800525c:	461d      	movcc	r5, r3
 800525e:	0553      	lsls	r3, r2, #21
 8005260:	d527      	bpl.n	80052b2 <__ssputs_r+0x8e>
 8005262:	4629      	mov	r1, r5
 8005264:	f7ff ff52 	bl	800510c <_malloc_r>
 8005268:	4606      	mov	r6, r0
 800526a:	b360      	cbz	r0, 80052c6 <__ssputs_r+0xa2>
 800526c:	6921      	ldr	r1, [r4, #16]
 800526e:	464a      	mov	r2, r9
 8005270:	f000 fd8c 	bl	8005d8c <memcpy>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	6126      	str	r6, [r4, #16]
 8005282:	6165      	str	r5, [r4, #20]
 8005284:	444e      	add	r6, r9
 8005286:	eba5 0509 	sub.w	r5, r5, r9
 800528a:	6026      	str	r6, [r4, #0]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	463e      	mov	r6, r7
 8005290:	42be      	cmp	r6, r7
 8005292:	d900      	bls.n	8005296 <__ssputs_r+0x72>
 8005294:	463e      	mov	r6, r7
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	4632      	mov	r2, r6
 800529a:	4641      	mov	r1, r8
 800529c:	f000 fd2a 	bl	8005cf4 <memmove>
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	1b9b      	subs	r3, r3, r6
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	4433      	add	r3, r6
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2000      	movs	r0, #0
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	462a      	mov	r2, r5
 80052b4:	f000 fd78 	bl	8005da8 <_realloc_r>
 80052b8:	4606      	mov	r6, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1e0      	bne.n	8005280 <__ssputs_r+0x5c>
 80052be:	6921      	ldr	r1, [r4, #16]
 80052c0:	4650      	mov	r0, sl
 80052c2:	f7ff feb7 	bl	8005034 <_free_r>
 80052c6:	230c      	movs	r3, #12
 80052c8:	f8ca 3000 	str.w	r3, [sl]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e7e9      	b.n	80052ae <__ssputs_r+0x8a>
	...

080052dc <_svfiprintf_r>:
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	4698      	mov	r8, r3
 80052e2:	898b      	ldrh	r3, [r1, #12]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	b09d      	sub	sp, #116	@ 0x74
 80052e8:	4607      	mov	r7, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	d510      	bpl.n	8005312 <_svfiprintf_r+0x36>
 80052f0:	690b      	ldr	r3, [r1, #16]
 80052f2:	b973      	cbnz	r3, 8005312 <_svfiprintf_r+0x36>
 80052f4:	2140      	movs	r1, #64	@ 0x40
 80052f6:	f7ff ff09 	bl	800510c <_malloc_r>
 80052fa:	6028      	str	r0, [r5, #0]
 80052fc:	6128      	str	r0, [r5, #16]
 80052fe:	b930      	cbnz	r0, 800530e <_svfiprintf_r+0x32>
 8005300:	230c      	movs	r3, #12
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b01d      	add	sp, #116	@ 0x74
 800530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	616b      	str	r3, [r5, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	9309      	str	r3, [sp, #36]	@ 0x24
 8005316:	2320      	movs	r3, #32
 8005318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800531c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005320:	2330      	movs	r3, #48	@ 0x30
 8005322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054c0 <_svfiprintf_r+0x1e4>
 8005326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800532a:	f04f 0901 	mov.w	r9, #1
 800532e:	4623      	mov	r3, r4
 8005330:	469a      	mov	sl, r3
 8005332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005336:	b10a      	cbz	r2, 800533c <_svfiprintf_r+0x60>
 8005338:	2a25      	cmp	r2, #37	@ 0x25
 800533a:	d1f9      	bne.n	8005330 <_svfiprintf_r+0x54>
 800533c:	ebba 0b04 	subs.w	fp, sl, r4
 8005340:	d00b      	beq.n	800535a <_svfiprintf_r+0x7e>
 8005342:	465b      	mov	r3, fp
 8005344:	4622      	mov	r2, r4
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff6b 	bl	8005224 <__ssputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80a7 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005356:	445a      	add	r2, fp
 8005358:	9209      	str	r2, [sp, #36]	@ 0x24
 800535a:	f89a 3000 	ldrb.w	r3, [sl]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 809f 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536e:	f10a 0a01 	add.w	sl, sl, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800537a:	931a      	str	r3, [sp, #104]	@ 0x68
 800537c:	4654      	mov	r4, sl
 800537e:	2205      	movs	r2, #5
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	484e      	ldr	r0, [pc, #312]	@ (80054c0 <_svfiprintf_r+0x1e4>)
 8005386:	f7fa ff53 	bl	8000230 <memchr>
 800538a:	9a04      	ldr	r2, [sp, #16]
 800538c:	b9d8      	cbnz	r0, 80053c6 <_svfiprintf_r+0xea>
 800538e:	06d0      	lsls	r0, r2, #27
 8005390:	bf44      	itt	mi
 8005392:	2320      	movmi	r3, #32
 8005394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005398:	0711      	lsls	r1, r2, #28
 800539a:	bf44      	itt	mi
 800539c:	232b      	movmi	r3, #43	@ 0x2b
 800539e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a2:	f89a 3000 	ldrb.w	r3, [sl]
 80053a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a8:	d015      	beq.n	80053d6 <_svfiprintf_r+0xfa>
 80053aa:	9a07      	ldr	r2, [sp, #28]
 80053ac:	4654      	mov	r4, sl
 80053ae:	2000      	movs	r0, #0
 80053b0:	f04f 0c0a 	mov.w	ip, #10
 80053b4:	4621      	mov	r1, r4
 80053b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ba:	3b30      	subs	r3, #48	@ 0x30
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d94b      	bls.n	8005458 <_svfiprintf_r+0x17c>
 80053c0:	b1b0      	cbz	r0, 80053f0 <_svfiprintf_r+0x114>
 80053c2:	9207      	str	r2, [sp, #28]
 80053c4:	e014      	b.n	80053f0 <_svfiprintf_r+0x114>
 80053c6:	eba0 0308 	sub.w	r3, r0, r8
 80053ca:	fa09 f303 	lsl.w	r3, r9, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	46a2      	mov	sl, r4
 80053d4:	e7d2      	b.n	800537c <_svfiprintf_r+0xa0>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9103      	str	r1, [sp, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bfbb      	ittet	lt
 80053e2:	425b      	neglt	r3, r3
 80053e4:	f042 0202 	orrlt.w	r2, r2, #2
 80053e8:	9307      	strge	r3, [sp, #28]
 80053ea:	9307      	strlt	r3, [sp, #28]
 80053ec:	bfb8      	it	lt
 80053ee:	9204      	strlt	r2, [sp, #16]
 80053f0:	7823      	ldrb	r3, [r4, #0]
 80053f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f4:	d10a      	bne.n	800540c <_svfiprintf_r+0x130>
 80053f6:	7863      	ldrb	r3, [r4, #1]
 80053f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fa:	d132      	bne.n	8005462 <_svfiprintf_r+0x186>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	1d1a      	adds	r2, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	9203      	str	r2, [sp, #12]
 8005404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005408:	3402      	adds	r4, #2
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054d0 <_svfiprintf_r+0x1f4>
 8005410:	7821      	ldrb	r1, [r4, #0]
 8005412:	2203      	movs	r2, #3
 8005414:	4650      	mov	r0, sl
 8005416:	f7fa ff0b 	bl	8000230 <memchr>
 800541a:	b138      	cbz	r0, 800542c <_svfiprintf_r+0x150>
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	eba0 000a 	sub.w	r0, r0, sl
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	4082      	lsls	r2, r0
 8005426:	4313      	orrs	r3, r2
 8005428:	3401      	adds	r4, #1
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005430:	4824      	ldr	r0, [pc, #144]	@ (80054c4 <_svfiprintf_r+0x1e8>)
 8005432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005436:	2206      	movs	r2, #6
 8005438:	f7fa fefa 	bl	8000230 <memchr>
 800543c:	2800      	cmp	r0, #0
 800543e:	d036      	beq.n	80054ae <_svfiprintf_r+0x1d2>
 8005440:	4b21      	ldr	r3, [pc, #132]	@ (80054c8 <_svfiprintf_r+0x1ec>)
 8005442:	bb1b      	cbnz	r3, 800548c <_svfiprintf_r+0x1b0>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	3307      	adds	r3, #7
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	3308      	adds	r3, #8
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005452:	4433      	add	r3, r6
 8005454:	9309      	str	r3, [sp, #36]	@ 0x24
 8005456:	e76a      	b.n	800532e <_svfiprintf_r+0x52>
 8005458:	fb0c 3202 	mla	r2, ip, r2, r3
 800545c:	460c      	mov	r4, r1
 800545e:	2001      	movs	r0, #1
 8005460:	e7a8      	b.n	80053b4 <_svfiprintf_r+0xd8>
 8005462:	2300      	movs	r3, #0
 8005464:	3401      	adds	r4, #1
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 0c0a 	mov.w	ip, #10
 800546e:	4620      	mov	r0, r4
 8005470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005474:	3a30      	subs	r2, #48	@ 0x30
 8005476:	2a09      	cmp	r2, #9
 8005478:	d903      	bls.n	8005482 <_svfiprintf_r+0x1a6>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0c6      	beq.n	800540c <_svfiprintf_r+0x130>
 800547e:	9105      	str	r1, [sp, #20]
 8005480:	e7c4      	b.n	800540c <_svfiprintf_r+0x130>
 8005482:	fb0c 2101 	mla	r1, ip, r1, r2
 8005486:	4604      	mov	r4, r0
 8005488:	2301      	movs	r3, #1
 800548a:	e7f0      	b.n	800546e <_svfiprintf_r+0x192>
 800548c:	ab03      	add	r3, sp, #12
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	462a      	mov	r2, r5
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <_svfiprintf_r+0x1f0>)
 8005494:	a904      	add	r1, sp, #16
 8005496:	4638      	mov	r0, r7
 8005498:	f3af 8000 	nop.w
 800549c:	1c42      	adds	r2, r0, #1
 800549e:	4606      	mov	r6, r0
 80054a0:	d1d6      	bne.n	8005450 <_svfiprintf_r+0x174>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	065b      	lsls	r3, r3, #25
 80054a6:	f53f af2d 	bmi.w	8005304 <_svfiprintf_r+0x28>
 80054aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054ac:	e72c      	b.n	8005308 <_svfiprintf_r+0x2c>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <_svfiprintf_r+0x1f0>)
 80054b6:	a904      	add	r1, sp, #16
 80054b8:	4638      	mov	r0, r7
 80054ba:	f000 f9bb 	bl	8005834 <_printf_i>
 80054be:	e7ed      	b.n	800549c <_svfiprintf_r+0x1c0>
 80054c0:	0800655c 	.word	0x0800655c
 80054c4:	08006566 	.word	0x08006566
 80054c8:	00000000 	.word	0x00000000
 80054cc:	08005225 	.word	0x08005225
 80054d0:	08006562 	.word	0x08006562

080054d4 <__sfputc_r>:
 80054d4:	6893      	ldr	r3, [r2, #8]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	b410      	push	{r4}
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	da08      	bge.n	80054f2 <__sfputc_r+0x1e>
 80054e0:	6994      	ldr	r4, [r2, #24]
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	db01      	blt.n	80054ea <__sfputc_r+0x16>
 80054e6:	290a      	cmp	r1, #10
 80054e8:	d103      	bne.n	80054f2 <__sfputc_r+0x1e>
 80054ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ee:	f7ff bc80 	b.w	8004df2 <__swbuf_r>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	1c58      	adds	r0, r3, #1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	4608      	mov	r0, r1
 80054fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005500:	4770      	bx	lr

08005502 <__sfputs_r>:
 8005502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4614      	mov	r4, r2
 800550a:	18d5      	adds	r5, r2, r3
 800550c:	42ac      	cmp	r4, r5
 800550e:	d101      	bne.n	8005514 <__sfputs_r+0x12>
 8005510:	2000      	movs	r0, #0
 8005512:	e007      	b.n	8005524 <__sfputs_r+0x22>
 8005514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005518:	463a      	mov	r2, r7
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ffda 	bl	80054d4 <__sfputc_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d1f3      	bne.n	800550c <__sfputs_r+0xa>
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005528 <_vfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	460d      	mov	r5, r1
 800552e:	b09d      	sub	sp, #116	@ 0x74
 8005530:	4614      	mov	r4, r2
 8005532:	4698      	mov	r8, r3
 8005534:	4606      	mov	r6, r0
 8005536:	b118      	cbz	r0, 8005540 <_vfiprintf_r+0x18>
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b90b      	cbnz	r3, 8005540 <_vfiprintf_r+0x18>
 800553c:	f7ff fb32 	bl	8004ba4 <__sinit>
 8005540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005542:	07d9      	lsls	r1, r3, #31
 8005544:	d405      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	059a      	lsls	r2, r3, #22
 800554a:	d402      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 800554c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800554e:	f7ff fd6e 	bl	800502e <__retarget_lock_acquire_recursive>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	d501      	bpl.n	800555c <_vfiprintf_r+0x34>
 8005558:	692b      	ldr	r3, [r5, #16]
 800555a:	b99b      	cbnz	r3, 8005584 <_vfiprintf_r+0x5c>
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff fc86 	bl	8004e70 <__swsetup_r>
 8005564:	b170      	cbz	r0, 8005584 <_vfiprintf_r+0x5c>
 8005566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005568:	07dc      	lsls	r4, r3, #31
 800556a:	d504      	bpl.n	8005576 <_vfiprintf_r+0x4e>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	b01d      	add	sp, #116	@ 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	0598      	lsls	r0, r3, #22
 800557a:	d4f7      	bmi.n	800556c <_vfiprintf_r+0x44>
 800557c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800557e:	f7ff fd57 	bl	8005030 <__retarget_lock_release_recursive>
 8005582:	e7f3      	b.n	800556c <_vfiprintf_r+0x44>
 8005584:	2300      	movs	r3, #0
 8005586:	9309      	str	r3, [sp, #36]	@ 0x24
 8005588:	2320      	movs	r3, #32
 800558a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800558e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005592:	2330      	movs	r3, #48	@ 0x30
 8005594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005744 <_vfiprintf_r+0x21c>
 8005598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800559c:	f04f 0901 	mov.w	r9, #1
 80055a0:	4623      	mov	r3, r4
 80055a2:	469a      	mov	sl, r3
 80055a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a8:	b10a      	cbz	r2, 80055ae <_vfiprintf_r+0x86>
 80055aa:	2a25      	cmp	r2, #37	@ 0x25
 80055ac:	d1f9      	bne.n	80055a2 <_vfiprintf_r+0x7a>
 80055ae:	ebba 0b04 	subs.w	fp, sl, r4
 80055b2:	d00b      	beq.n	80055cc <_vfiprintf_r+0xa4>
 80055b4:	465b      	mov	r3, fp
 80055b6:	4622      	mov	r2, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa1 	bl	8005502 <__sfputs_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f000 80a7 	beq.w	8005714 <_vfiprintf_r+0x1ec>
 80055c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055c8:	445a      	add	r2, fp
 80055ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80055cc:	f89a 3000 	ldrb.w	r3, [sl]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 809f 	beq.w	8005714 <_vfiprintf_r+0x1ec>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e0:	f10a 0a01 	add.w	sl, sl, #1
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80055ee:	4654      	mov	r4, sl
 80055f0:	2205      	movs	r2, #5
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	4853      	ldr	r0, [pc, #332]	@ (8005744 <_vfiprintf_r+0x21c>)
 80055f8:	f7fa fe1a 	bl	8000230 <memchr>
 80055fc:	9a04      	ldr	r2, [sp, #16]
 80055fe:	b9d8      	cbnz	r0, 8005638 <_vfiprintf_r+0x110>
 8005600:	06d1      	lsls	r1, r2, #27
 8005602:	bf44      	itt	mi
 8005604:	2320      	movmi	r3, #32
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800560a:	0713      	lsls	r3, r2, #28
 800560c:	bf44      	itt	mi
 800560e:	232b      	movmi	r3, #43	@ 0x2b
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005614:	f89a 3000 	ldrb.w	r3, [sl]
 8005618:	2b2a      	cmp	r3, #42	@ 0x2a
 800561a:	d015      	beq.n	8005648 <_vfiprintf_r+0x120>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	4654      	mov	r4, sl
 8005620:	2000      	movs	r0, #0
 8005622:	f04f 0c0a 	mov.w	ip, #10
 8005626:	4621      	mov	r1, r4
 8005628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562c:	3b30      	subs	r3, #48	@ 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d94b      	bls.n	80056ca <_vfiprintf_r+0x1a2>
 8005632:	b1b0      	cbz	r0, 8005662 <_vfiprintf_r+0x13a>
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	e014      	b.n	8005662 <_vfiprintf_r+0x13a>
 8005638:	eba0 0308 	sub.w	r3, r0, r8
 800563c:	fa09 f303 	lsl.w	r3, r9, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	46a2      	mov	sl, r4
 8005646:	e7d2      	b.n	80055ee <_vfiprintf_r+0xc6>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d19      	adds	r1, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9103      	str	r1, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbb      	ittet	lt
 8005654:	425b      	neglt	r3, r3
 8005656:	f042 0202 	orrlt.w	r2, r2, #2
 800565a:	9307      	strge	r3, [sp, #28]
 800565c:	9307      	strlt	r3, [sp, #28]
 800565e:	bfb8      	it	lt
 8005660:	9204      	strlt	r2, [sp, #16]
 8005662:	7823      	ldrb	r3, [r4, #0]
 8005664:	2b2e      	cmp	r3, #46	@ 0x2e
 8005666:	d10a      	bne.n	800567e <_vfiprintf_r+0x156>
 8005668:	7863      	ldrb	r3, [r4, #1]
 800566a:	2b2a      	cmp	r3, #42	@ 0x2a
 800566c:	d132      	bne.n	80056d4 <_vfiprintf_r+0x1ac>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9203      	str	r2, [sp, #12]
 8005676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800567a:	3402      	adds	r4, #2
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005754 <_vfiprintf_r+0x22c>
 8005682:	7821      	ldrb	r1, [r4, #0]
 8005684:	2203      	movs	r2, #3
 8005686:	4650      	mov	r0, sl
 8005688:	f7fa fdd2 	bl	8000230 <memchr>
 800568c:	b138      	cbz	r0, 800569e <_vfiprintf_r+0x176>
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	eba0 000a 	sub.w	r0, r0, sl
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	4082      	lsls	r2, r0
 8005698:	4313      	orrs	r3, r2
 800569a:	3401      	adds	r4, #1
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4829      	ldr	r0, [pc, #164]	@ (8005748 <_vfiprintf_r+0x220>)
 80056a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056a8:	2206      	movs	r2, #6
 80056aa:	f7fa fdc1 	bl	8000230 <memchr>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d03f      	beq.n	8005732 <_vfiprintf_r+0x20a>
 80056b2:	4b26      	ldr	r3, [pc, #152]	@ (800574c <_vfiprintf_r+0x224>)
 80056b4:	bb1b      	cbnz	r3, 80056fe <_vfiprintf_r+0x1d6>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	3308      	adds	r3, #8
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056c4:	443b      	add	r3, r7
 80056c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c8:	e76a      	b.n	80055a0 <_vfiprintf_r+0x78>
 80056ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ce:	460c      	mov	r4, r1
 80056d0:	2001      	movs	r0, #1
 80056d2:	e7a8      	b.n	8005626 <_vfiprintf_r+0xfe>
 80056d4:	2300      	movs	r3, #0
 80056d6:	3401      	adds	r4, #1
 80056d8:	9305      	str	r3, [sp, #20]
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4620      	mov	r0, r4
 80056e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e6:	3a30      	subs	r2, #48	@ 0x30
 80056e8:	2a09      	cmp	r2, #9
 80056ea:	d903      	bls.n	80056f4 <_vfiprintf_r+0x1cc>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0c6      	beq.n	800567e <_vfiprintf_r+0x156>
 80056f0:	9105      	str	r1, [sp, #20]
 80056f2:	e7c4      	b.n	800567e <_vfiprintf_r+0x156>
 80056f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f8:	4604      	mov	r4, r0
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7f0      	b.n	80056e0 <_vfiprintf_r+0x1b8>
 80056fe:	ab03      	add	r3, sp, #12
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	462a      	mov	r2, r5
 8005704:	4b12      	ldr	r3, [pc, #72]	@ (8005750 <_vfiprintf_r+0x228>)
 8005706:	a904      	add	r1, sp, #16
 8005708:	4630      	mov	r0, r6
 800570a:	f3af 8000 	nop.w
 800570e:	4607      	mov	r7, r0
 8005710:	1c78      	adds	r0, r7, #1
 8005712:	d1d6      	bne.n	80056c2 <_vfiprintf_r+0x19a>
 8005714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005716:	07d9      	lsls	r1, r3, #31
 8005718:	d405      	bmi.n	8005726 <_vfiprintf_r+0x1fe>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	059a      	lsls	r2, r3, #22
 800571e:	d402      	bmi.n	8005726 <_vfiprintf_r+0x1fe>
 8005720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005722:	f7ff fc85 	bl	8005030 <__retarget_lock_release_recursive>
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	065b      	lsls	r3, r3, #25
 800572a:	f53f af1f 	bmi.w	800556c <_vfiprintf_r+0x44>
 800572e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005730:	e71e      	b.n	8005570 <_vfiprintf_r+0x48>
 8005732:	ab03      	add	r3, sp, #12
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	462a      	mov	r2, r5
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <_vfiprintf_r+0x228>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f879 	bl	8005834 <_printf_i>
 8005742:	e7e4      	b.n	800570e <_vfiprintf_r+0x1e6>
 8005744:	0800655c 	.word	0x0800655c
 8005748:	08006566 	.word	0x08006566
 800574c:	00000000 	.word	0x00000000
 8005750:	08005503 	.word	0x08005503
 8005754:	08006562 	.word	0x08006562

08005758 <_printf_common>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	4616      	mov	r6, r2
 800575e:	4698      	mov	r8, r3
 8005760:	688a      	ldr	r2, [r1, #8]
 8005762:	690b      	ldr	r3, [r1, #16]
 8005764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005768:	4293      	cmp	r3, r2
 800576a:	bfb8      	it	lt
 800576c:	4613      	movlt	r3, r2
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005774:	4607      	mov	r7, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b10a      	cbz	r2, 800577e <_printf_common+0x26>
 800577a:	3301      	adds	r3, #1
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	0699      	lsls	r1, r3, #26
 8005782:	bf42      	ittt	mi
 8005784:	6833      	ldrmi	r3, [r6, #0]
 8005786:	3302      	addmi	r3, #2
 8005788:	6033      	strmi	r3, [r6, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	f015 0506 	ands.w	r5, r5, #6
 8005790:	d106      	bne.n	80057a0 <_printf_common+0x48>
 8005792:	f104 0a19 	add.w	sl, r4, #25
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	6832      	ldr	r2, [r6, #0]
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	42ab      	cmp	r3, r5
 800579e:	dc26      	bgt.n	80057ee <_printf_common+0x96>
 80057a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	3b00      	subs	r3, #0
 80057a8:	bf18      	it	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	0692      	lsls	r2, r2, #26
 80057ae:	d42b      	bmi.n	8005808 <_printf_common+0xb0>
 80057b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057b4:	4641      	mov	r1, r8
 80057b6:	4638      	mov	r0, r7
 80057b8:	47c8      	blx	r9
 80057ba:	3001      	adds	r0, #1
 80057bc:	d01e      	beq.n	80057fc <_printf_common+0xa4>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	f003 0306 	and.w	r3, r3, #6
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf02      	ittt	eq
 80057ca:	68e5      	ldreq	r5, [r4, #12]
 80057cc:	6833      	ldreq	r3, [r6, #0]
 80057ce:	1aed      	subeq	r5, r5, r3
 80057d0:	68a3      	ldr	r3, [r4, #8]
 80057d2:	bf0c      	ite	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	2500      	movne	r5, #0
 80057da:	4293      	cmp	r3, r2
 80057dc:	bfc4      	itt	gt
 80057de:	1a9b      	subgt	r3, r3, r2
 80057e0:	18ed      	addgt	r5, r5, r3
 80057e2:	2600      	movs	r6, #0
 80057e4:	341a      	adds	r4, #26
 80057e6:	42b5      	cmp	r5, r6
 80057e8:	d11a      	bne.n	8005820 <_printf_common+0xc8>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e008      	b.n	8005800 <_printf_common+0xa8>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4652      	mov	r2, sl
 80057f2:	4641      	mov	r1, r8
 80057f4:	4638      	mov	r0, r7
 80057f6:	47c8      	blx	r9
 80057f8:	3001      	adds	r0, #1
 80057fa:	d103      	bne.n	8005804 <_printf_common+0xac>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005804:	3501      	adds	r5, #1
 8005806:	e7c6      	b.n	8005796 <_printf_common+0x3e>
 8005808:	18e1      	adds	r1, r4, r3
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	2030      	movs	r0, #48	@ 0x30
 800580e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005812:	4422      	add	r2, r4
 8005814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800581c:	3302      	adds	r3, #2
 800581e:	e7c7      	b.n	80057b0 <_printf_common+0x58>
 8005820:	2301      	movs	r3, #1
 8005822:	4622      	mov	r2, r4
 8005824:	4641      	mov	r1, r8
 8005826:	4638      	mov	r0, r7
 8005828:	47c8      	blx	r9
 800582a:	3001      	adds	r0, #1
 800582c:	d0e6      	beq.n	80057fc <_printf_common+0xa4>
 800582e:	3601      	adds	r6, #1
 8005830:	e7d9      	b.n	80057e6 <_printf_common+0x8e>
	...

08005834 <_printf_i>:
 8005834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	7e0f      	ldrb	r7, [r1, #24]
 800583a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800583c:	2f78      	cmp	r7, #120	@ 0x78
 800583e:	4691      	mov	r9, r2
 8005840:	4680      	mov	r8, r0
 8005842:	460c      	mov	r4, r1
 8005844:	469a      	mov	sl, r3
 8005846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800584a:	d807      	bhi.n	800585c <_printf_i+0x28>
 800584c:	2f62      	cmp	r7, #98	@ 0x62
 800584e:	d80a      	bhi.n	8005866 <_printf_i+0x32>
 8005850:	2f00      	cmp	r7, #0
 8005852:	f000 80d1 	beq.w	80059f8 <_printf_i+0x1c4>
 8005856:	2f58      	cmp	r7, #88	@ 0x58
 8005858:	f000 80b8 	beq.w	80059cc <_printf_i+0x198>
 800585c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005864:	e03a      	b.n	80058dc <_printf_i+0xa8>
 8005866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800586a:	2b15      	cmp	r3, #21
 800586c:	d8f6      	bhi.n	800585c <_printf_i+0x28>
 800586e:	a101      	add	r1, pc, #4	@ (adr r1, 8005874 <_printf_i+0x40>)
 8005870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005874:	080058cd 	.word	0x080058cd
 8005878:	080058e1 	.word	0x080058e1
 800587c:	0800585d 	.word	0x0800585d
 8005880:	0800585d 	.word	0x0800585d
 8005884:	0800585d 	.word	0x0800585d
 8005888:	0800585d 	.word	0x0800585d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800585d 	.word	0x0800585d
 8005894:	0800585d 	.word	0x0800585d
 8005898:	0800585d 	.word	0x0800585d
 800589c:	0800585d 	.word	0x0800585d
 80058a0:	080059df 	.word	0x080059df
 80058a4:	0800590b 	.word	0x0800590b
 80058a8:	08005999 	.word	0x08005999
 80058ac:	0800585d 	.word	0x0800585d
 80058b0:	0800585d 	.word	0x0800585d
 80058b4:	08005a01 	.word	0x08005a01
 80058b8:	0800585d 	.word	0x0800585d
 80058bc:	0800590b 	.word	0x0800590b
 80058c0:	0800585d 	.word	0x0800585d
 80058c4:	0800585d 	.word	0x0800585d
 80058c8:	080059a1 	.word	0x080059a1
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6032      	str	r2, [r6, #0]
 80058d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058dc:	2301      	movs	r3, #1
 80058de:	e09c      	b.n	8005a1a <_printf_i+0x1e6>
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	6031      	str	r1, [r6, #0]
 80058e8:	0606      	lsls	r6, r0, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xbc>
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	e003      	b.n	80058f8 <_printf_i+0xc4>
 80058f0:	0645      	lsls	r5, r0, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xb8>
 80058f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	da03      	bge.n	8005904 <_printf_i+0xd0>
 80058fc:	232d      	movs	r3, #45	@ 0x2d
 80058fe:	426d      	negs	r5, r5
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005904:	4858      	ldr	r0, [pc, #352]	@ (8005a68 <_printf_i+0x234>)
 8005906:	230a      	movs	r3, #10
 8005908:	e011      	b.n	800592e <_printf_i+0xfa>
 800590a:	6821      	ldr	r1, [r4, #0]
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	0608      	lsls	r0, r1, #24
 8005910:	f853 5b04 	ldr.w	r5, [r3], #4
 8005914:	d402      	bmi.n	800591c <_printf_i+0xe8>
 8005916:	0649      	lsls	r1, r1, #25
 8005918:	bf48      	it	mi
 800591a:	b2ad      	uxthmi	r5, r5
 800591c:	2f6f      	cmp	r7, #111	@ 0x6f
 800591e:	4852      	ldr	r0, [pc, #328]	@ (8005a68 <_printf_i+0x234>)
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	bf14      	ite	ne
 8005924:	230a      	movne	r3, #10
 8005926:	2308      	moveq	r3, #8
 8005928:	2100      	movs	r1, #0
 800592a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800592e:	6866      	ldr	r6, [r4, #4]
 8005930:	60a6      	str	r6, [r4, #8]
 8005932:	2e00      	cmp	r6, #0
 8005934:	db05      	blt.n	8005942 <_printf_i+0x10e>
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	432e      	orrs	r6, r5
 800593a:	f021 0104 	bic.w	r1, r1, #4
 800593e:	6021      	str	r1, [r4, #0]
 8005940:	d04b      	beq.n	80059da <_printf_i+0x1a6>
 8005942:	4616      	mov	r6, r2
 8005944:	fbb5 f1f3 	udiv	r1, r5, r3
 8005948:	fb03 5711 	mls	r7, r3, r1, r5
 800594c:	5dc7      	ldrb	r7, [r0, r7]
 800594e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005952:	462f      	mov	r7, r5
 8005954:	42bb      	cmp	r3, r7
 8005956:	460d      	mov	r5, r1
 8005958:	d9f4      	bls.n	8005944 <_printf_i+0x110>
 800595a:	2b08      	cmp	r3, #8
 800595c:	d10b      	bne.n	8005976 <_printf_i+0x142>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	07df      	lsls	r7, r3, #31
 8005962:	d508      	bpl.n	8005976 <_printf_i+0x142>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	6861      	ldr	r1, [r4, #4]
 8005968:	4299      	cmp	r1, r3
 800596a:	bfde      	ittt	le
 800596c:	2330      	movle	r3, #48	@ 0x30
 800596e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005972:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005976:	1b92      	subs	r2, r2, r6
 8005978:	6122      	str	r2, [r4, #16]
 800597a:	f8cd a000 	str.w	sl, [sp]
 800597e:	464b      	mov	r3, r9
 8005980:	aa03      	add	r2, sp, #12
 8005982:	4621      	mov	r1, r4
 8005984:	4640      	mov	r0, r8
 8005986:	f7ff fee7 	bl	8005758 <_printf_common>
 800598a:	3001      	adds	r0, #1
 800598c:	d14a      	bne.n	8005a24 <_printf_i+0x1f0>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
 8005992:	b004      	add	sp, #16
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f043 0320 	orr.w	r3, r3, #32
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	4832      	ldr	r0, [pc, #200]	@ (8005a6c <_printf_i+0x238>)
 80059a2:	2778      	movs	r7, #120	@ 0x78
 80059a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	6831      	ldr	r1, [r6, #0]
 80059ac:	061f      	lsls	r7, r3, #24
 80059ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80059b2:	d402      	bmi.n	80059ba <_printf_i+0x186>
 80059b4:	065f      	lsls	r7, r3, #25
 80059b6:	bf48      	it	mi
 80059b8:	b2ad      	uxthmi	r5, r5
 80059ba:	6031      	str	r1, [r6, #0]
 80059bc:	07d9      	lsls	r1, r3, #31
 80059be:	bf44      	itt	mi
 80059c0:	f043 0320 	orrmi.w	r3, r3, #32
 80059c4:	6023      	strmi	r3, [r4, #0]
 80059c6:	b11d      	cbz	r5, 80059d0 <_printf_i+0x19c>
 80059c8:	2310      	movs	r3, #16
 80059ca:	e7ad      	b.n	8005928 <_printf_i+0xf4>
 80059cc:	4826      	ldr	r0, [pc, #152]	@ (8005a68 <_printf_i+0x234>)
 80059ce:	e7e9      	b.n	80059a4 <_printf_i+0x170>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f023 0320 	bic.w	r3, r3, #32
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	e7f6      	b.n	80059c8 <_printf_i+0x194>
 80059da:	4616      	mov	r6, r2
 80059dc:	e7bd      	b.n	800595a <_printf_i+0x126>
 80059de:	6833      	ldr	r3, [r6, #0]
 80059e0:	6825      	ldr	r5, [r4, #0]
 80059e2:	6961      	ldr	r1, [r4, #20]
 80059e4:	1d18      	adds	r0, r3, #4
 80059e6:	6030      	str	r0, [r6, #0]
 80059e8:	062e      	lsls	r6, r5, #24
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	d501      	bpl.n	80059f2 <_printf_i+0x1be>
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <_printf_i+0x1c4>
 80059f2:	0668      	lsls	r0, r5, #25
 80059f4:	d5fb      	bpl.n	80059ee <_printf_i+0x1ba>
 80059f6:	8019      	strh	r1, [r3, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	4616      	mov	r6, r2
 80059fe:	e7bc      	b.n	800597a <_printf_i+0x146>
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	6032      	str	r2, [r6, #0]
 8005a06:	681e      	ldr	r6, [r3, #0]
 8005a08:	6862      	ldr	r2, [r4, #4]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7fa fc0f 	bl	8000230 <memchr>
 8005a12:	b108      	cbz	r0, 8005a18 <_printf_i+0x1e4>
 8005a14:	1b80      	subs	r0, r0, r6
 8005a16:	6060      	str	r0, [r4, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a22:	e7aa      	b.n	800597a <_printf_i+0x146>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	4632      	mov	r2, r6
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	47d0      	blx	sl
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d0ad      	beq.n	800598e <_printf_i+0x15a>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	079b      	lsls	r3, r3, #30
 8005a36:	d413      	bmi.n	8005a60 <_printf_i+0x22c>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e7a6      	b.n	8005992 <_printf_i+0x15e>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4632      	mov	r2, r6
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	47d0      	blx	sl
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d09d      	beq.n	800598e <_printf_i+0x15a>
 8005a52:	3501      	adds	r5, #1
 8005a54:	68e3      	ldr	r3, [r4, #12]
 8005a56:	9903      	ldr	r1, [sp, #12]
 8005a58:	1a5b      	subs	r3, r3, r1
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	dcf2      	bgt.n	8005a44 <_printf_i+0x210>
 8005a5e:	e7eb      	b.n	8005a38 <_printf_i+0x204>
 8005a60:	2500      	movs	r5, #0
 8005a62:	f104 0619 	add.w	r6, r4, #25
 8005a66:	e7f5      	b.n	8005a54 <_printf_i+0x220>
 8005a68:	0800656d 	.word	0x0800656d
 8005a6c:	0800657e 	.word	0x0800657e

08005a70 <__sflush_r>:
 8005a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	0716      	lsls	r6, r2, #28
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	d454      	bmi.n	8005b2a <__sflush_r+0xba>
 8005a80:	684b      	ldr	r3, [r1, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dc02      	bgt.n	8005a8c <__sflush_r+0x1c>
 8005a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dd48      	ble.n	8005b1e <__sflush_r+0xae>
 8005a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	d045      	beq.n	8005b1e <__sflush_r+0xae>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a98:	682f      	ldr	r7, [r5, #0]
 8005a9a:	6a21      	ldr	r1, [r4, #32]
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	d030      	beq.n	8005b02 <__sflush_r+0x92>
 8005aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	0759      	lsls	r1, r3, #29
 8005aa6:	d505      	bpl.n	8005ab4 <__sflush_r+0x44>
 8005aa8:	6863      	ldr	r3, [r4, #4]
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005aae:	b10b      	cbz	r3, 8005ab4 <__sflush_r+0x44>
 8005ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ab8:	6a21      	ldr	r1, [r4, #32]
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b0      	blx	r6
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	d106      	bne.n	8005ad2 <__sflush_r+0x62>
 8005ac4:	6829      	ldr	r1, [r5, #0]
 8005ac6:	291d      	cmp	r1, #29
 8005ac8:	d82b      	bhi.n	8005b22 <__sflush_r+0xb2>
 8005aca:	4a2a      	ldr	r2, [pc, #168]	@ (8005b74 <__sflush_r+0x104>)
 8005acc:	40ca      	lsrs	r2, r1
 8005ace:	07d6      	lsls	r6, r2, #31
 8005ad0:	d527      	bpl.n	8005b22 <__sflush_r+0xb2>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	6062      	str	r2, [r4, #4]
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	6922      	ldr	r2, [r4, #16]
 8005ada:	6022      	str	r2, [r4, #0]
 8005adc:	d504      	bpl.n	8005ae8 <__sflush_r+0x78>
 8005ade:	1c42      	adds	r2, r0, #1
 8005ae0:	d101      	bne.n	8005ae6 <__sflush_r+0x76>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	b903      	cbnz	r3, 8005ae8 <__sflush_r+0x78>
 8005ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aea:	602f      	str	r7, [r5, #0]
 8005aec:	b1b9      	cbz	r1, 8005b1e <__sflush_r+0xae>
 8005aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d002      	beq.n	8005afc <__sflush_r+0x8c>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff fa9c 	bl	8005034 <_free_r>
 8005afc:	2300      	movs	r3, #0
 8005afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b00:	e00d      	b.n	8005b1e <__sflush_r+0xae>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b0      	blx	r6
 8005b08:	4602      	mov	r2, r0
 8005b0a:	1c50      	adds	r0, r2, #1
 8005b0c:	d1c9      	bne.n	8005aa2 <__sflush_r+0x32>
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0c6      	beq.n	8005aa2 <__sflush_r+0x32>
 8005b14:	2b1d      	cmp	r3, #29
 8005b16:	d001      	beq.n	8005b1c <__sflush_r+0xac>
 8005b18:	2b16      	cmp	r3, #22
 8005b1a:	d11e      	bne.n	8005b5a <__sflush_r+0xea>
 8005b1c:	602f      	str	r7, [r5, #0]
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e022      	b.n	8005b68 <__sflush_r+0xf8>
 8005b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	e01b      	b.n	8005b62 <__sflush_r+0xf2>
 8005b2a:	690f      	ldr	r7, [r1, #16]
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	d0f6      	beq.n	8005b1e <__sflush_r+0xae>
 8005b30:	0793      	lsls	r3, r2, #30
 8005b32:	680e      	ldr	r6, [r1, #0]
 8005b34:	bf08      	it	eq
 8005b36:	694b      	ldreq	r3, [r1, #20]
 8005b38:	600f      	str	r7, [r1, #0]
 8005b3a:	bf18      	it	ne
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	eba6 0807 	sub.w	r8, r6, r7
 8005b42:	608b      	str	r3, [r1, #8]
 8005b44:	f1b8 0f00 	cmp.w	r8, #0
 8005b48:	dde9      	ble.n	8005b1e <__sflush_r+0xae>
 8005b4a:	6a21      	ldr	r1, [r4, #32]
 8005b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b4e:	4643      	mov	r3, r8
 8005b50:	463a      	mov	r2, r7
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b0      	blx	r6
 8005b56:	2800      	cmp	r0, #0
 8005b58:	dc08      	bgt.n	8005b6c <__sflush_r+0xfc>
 8005b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b6c:	4407      	add	r7, r0
 8005b6e:	eba8 0800 	sub.w	r8, r8, r0
 8005b72:	e7e7      	b.n	8005b44 <__sflush_r+0xd4>
 8005b74:	20400001 	.word	0x20400001

08005b78 <_fflush_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b913      	cbnz	r3, 8005b88 <_fflush_r+0x10>
 8005b82:	2500      	movs	r5, #0
 8005b84:	4628      	mov	r0, r5
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	b118      	cbz	r0, 8005b92 <_fflush_r+0x1a>
 8005b8a:	6a03      	ldr	r3, [r0, #32]
 8005b8c:	b90b      	cbnz	r3, 8005b92 <_fflush_r+0x1a>
 8005b8e:	f7ff f809 	bl	8004ba4 <__sinit>
 8005b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f3      	beq.n	8005b82 <_fflush_r+0xa>
 8005b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b9c:	07d0      	lsls	r0, r2, #31
 8005b9e:	d404      	bmi.n	8005baa <_fflush_r+0x32>
 8005ba0:	0599      	lsls	r1, r3, #22
 8005ba2:	d402      	bmi.n	8005baa <_fflush_r+0x32>
 8005ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ba6:	f7ff fa42 	bl	800502e <__retarget_lock_acquire_recursive>
 8005baa:	4628      	mov	r0, r5
 8005bac:	4621      	mov	r1, r4
 8005bae:	f7ff ff5f 	bl	8005a70 <__sflush_r>
 8005bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bb4:	07da      	lsls	r2, r3, #31
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	d4e4      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	059b      	lsls	r3, r3, #22
 8005bbe:	d4e1      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bc2:	f7ff fa35 	bl	8005030 <__retarget_lock_release_recursive>
 8005bc6:	e7dd      	b.n	8005b84 <_fflush_r+0xc>

08005bc8 <__swhatbuf_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	b096      	sub	sp, #88	@ 0x58
 8005bd4:	4615      	mov	r5, r2
 8005bd6:	461e      	mov	r6, r3
 8005bd8:	da0d      	bge.n	8005bf6 <__swhatbuf_r+0x2e>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005be0:	f04f 0100 	mov.w	r1, #0
 8005be4:	bf14      	ite	ne
 8005be6:	2340      	movne	r3, #64	@ 0x40
 8005be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bec:	2000      	movs	r0, #0
 8005bee:	6031      	str	r1, [r6, #0]
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	b016      	add	sp, #88	@ 0x58
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	466a      	mov	r2, sp
 8005bf8:	f000 f896 	bl	8005d28 <_fstat_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	dbec      	blt.n	8005bda <__swhatbuf_r+0x12>
 8005c00:	9901      	ldr	r1, [sp, #4]
 8005c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c0a:	4259      	negs	r1, r3
 8005c0c:	4159      	adcs	r1, r3
 8005c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c12:	e7eb      	b.n	8005bec <__swhatbuf_r+0x24>

08005c14 <__smakebuf_r>:
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c18:	079d      	lsls	r5, r3, #30
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d507      	bpl.n	8005c30 <__smakebuf_r+0x1c>
 8005c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6163      	str	r3, [r4, #20]
 8005c2c:	b003      	add	sp, #12
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c30:	ab01      	add	r3, sp, #4
 8005c32:	466a      	mov	r2, sp
 8005c34:	f7ff ffc8 	bl	8005bc8 <__swhatbuf_r>
 8005c38:	9f00      	ldr	r7, [sp, #0]
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff fa64 	bl	800510c <_malloc_r>
 8005c44:	b948      	cbnz	r0, 8005c5a <__smakebuf_r+0x46>
 8005c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4a:	059a      	lsls	r2, r3, #22
 8005c4c:	d4ee      	bmi.n	8005c2c <__smakebuf_r+0x18>
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	f043 0302 	orr.w	r3, r3, #2
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	e7e2      	b.n	8005c20 <__smakebuf_r+0xc>
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	6020      	str	r0, [r4, #0]
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c6a:	b15b      	cbz	r3, 8005c84 <__smakebuf_r+0x70>
 8005c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 f86b 	bl	8005d4c <_isatty_r>
 8005c76:	b128      	cbz	r0, 8005c84 <__smakebuf_r+0x70>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	431d      	orrs	r5, r3
 8005c88:	81a5      	strh	r5, [r4, #12]
 8005c8a:	e7cf      	b.n	8005c2c <__smakebuf_r+0x18>

08005c8c <_putc_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	460d      	mov	r5, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	4606      	mov	r6, r0
 8005c94:	b118      	cbz	r0, 8005c9e <_putc_r+0x12>
 8005c96:	6a03      	ldr	r3, [r0, #32]
 8005c98:	b90b      	cbnz	r3, 8005c9e <_putc_r+0x12>
 8005c9a:	f7fe ff83 	bl	8004ba4 <__sinit>
 8005c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ca0:	07d8      	lsls	r0, r3, #31
 8005ca2:	d405      	bmi.n	8005cb0 <_putc_r+0x24>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	0599      	lsls	r1, r3, #22
 8005ca8:	d402      	bmi.n	8005cb0 <_putc_r+0x24>
 8005caa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cac:	f7ff f9bf 	bl	800502e <__retarget_lock_acquire_recursive>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	da05      	bge.n	8005cc6 <_putc_r+0x3a>
 8005cba:	69a2      	ldr	r2, [r4, #24]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	db12      	blt.n	8005ce6 <_putc_r+0x5a>
 8005cc0:	b2eb      	uxtb	r3, r5
 8005cc2:	2b0a      	cmp	r3, #10
 8005cc4:	d00f      	beq.n	8005ce6 <_putc_r+0x5a>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	701d      	strb	r5, [r3, #0]
 8005cce:	b2ed      	uxtb	r5, r5
 8005cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cd2:	07da      	lsls	r2, r3, #31
 8005cd4:	d405      	bmi.n	8005ce2 <_putc_r+0x56>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	059b      	lsls	r3, r3, #22
 8005cda:	d402      	bmi.n	8005ce2 <_putc_r+0x56>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cde:	f7ff f9a7 	bl	8005030 <__retarget_lock_release_recursive>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4630      	mov	r0, r6
 8005cec:	f7ff f881 	bl	8004df2 <__swbuf_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	e7ed      	b.n	8005cd0 <_putc_r+0x44>

08005cf4 <memmove>:
 8005cf4:	4288      	cmp	r0, r1
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	eb01 0402 	add.w	r4, r1, r2
 8005cfc:	d902      	bls.n	8005d04 <memmove+0x10>
 8005cfe:	4284      	cmp	r4, r0
 8005d00:	4623      	mov	r3, r4
 8005d02:	d807      	bhi.n	8005d14 <memmove+0x20>
 8005d04:	1e43      	subs	r3, r0, #1
 8005d06:	42a1      	cmp	r1, r4
 8005d08:	d008      	beq.n	8005d1c <memmove+0x28>
 8005d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d12:	e7f8      	b.n	8005d06 <memmove+0x12>
 8005d14:	4402      	add	r2, r0
 8005d16:	4601      	mov	r1, r0
 8005d18:	428a      	cmp	r2, r1
 8005d1a:	d100      	bne.n	8005d1e <memmove+0x2a>
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d26:	e7f7      	b.n	8005d18 <memmove+0x24>

08005d28 <_fstat_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	@ (8005d48 <_fstat_r+0x20>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f7fb fdff 	bl	8001938 <_fstat>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_fstat_r+0x1c>
 8005d3e:	682b      	ldr	r3, [r5, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_fstat_r+0x1c>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	200002d8 	.word	0x200002d8

08005d4c <_isatty_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d06      	ldr	r5, [pc, #24]	@ (8005d68 <_isatty_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	f7fb fdfe 	bl	8001958 <_isatty>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_isatty_r+0x1a>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_isatty_r+0x1a>
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	200002d8 	.word	0x200002d8

08005d6c <_sbrk_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	@ (8005d88 <_sbrk_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fb fe06 	bl	8001988 <_sbrk>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_sbrk_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_sbrk_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	200002d8 	.word	0x200002d8

08005d8c <memcpy>:
 8005d8c:	440a      	add	r2, r1
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d94:	d100      	bne.n	8005d98 <memcpy+0xc>
 8005d96:	4770      	bx	lr
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da2:	4291      	cmp	r1, r2
 8005da4:	d1f9      	bne.n	8005d9a <memcpy+0xe>
 8005da6:	bd10      	pop	{r4, pc}

08005da8 <_realloc_r>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	4607      	mov	r7, r0
 8005dae:	4614      	mov	r4, r2
 8005db0:	460d      	mov	r5, r1
 8005db2:	b921      	cbnz	r1, 8005dbe <_realloc_r+0x16>
 8005db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db8:	4611      	mov	r1, r2
 8005dba:	f7ff b9a7 	b.w	800510c <_malloc_r>
 8005dbe:	b92a      	cbnz	r2, 8005dcc <_realloc_r+0x24>
 8005dc0:	f7ff f938 	bl	8005034 <_free_r>
 8005dc4:	4625      	mov	r5, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dcc:	f000 f81a 	bl	8005e04 <_malloc_usable_size_r>
 8005dd0:	4284      	cmp	r4, r0
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	d802      	bhi.n	8005ddc <_realloc_r+0x34>
 8005dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dda:	d8f4      	bhi.n	8005dc6 <_realloc_r+0x1e>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff f994 	bl	800510c <_malloc_r>
 8005de4:	4680      	mov	r8, r0
 8005de6:	b908      	cbnz	r0, 8005dec <_realloc_r+0x44>
 8005de8:	4645      	mov	r5, r8
 8005dea:	e7ec      	b.n	8005dc6 <_realloc_r+0x1e>
 8005dec:	42b4      	cmp	r4, r6
 8005dee:	4622      	mov	r2, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	bf28      	it	cs
 8005df4:	4632      	movcs	r2, r6
 8005df6:	f7ff ffc9 	bl	8005d8c <memcpy>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff f919 	bl	8005034 <_free_r>
 8005e02:	e7f1      	b.n	8005de8 <_realloc_r+0x40>

08005e04 <_malloc_usable_size_r>:
 8005e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e08:	1f18      	subs	r0, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbc      	itt	lt
 8005e0e:	580b      	ldrlt	r3, [r1, r0]
 8005e10:	18c0      	addlt	r0, r0, r3
 8005e12:	4770      	bx	lr

08005e14 <_init>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr

08005e20 <_fini>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr
